{"file_contents":{"README.md":{"content":"# odin1","size_bytes":7},"replit.md":{"content":"# ODIN (Optimal Dynamic Interplanetary Navigator) System\n\n## Overview\n\nODIN is an AI-powered spacecraft trajectory planning system designed for autonomous Earth-to-Moon missions. The system combines advanced orbital mechanics, real-time threat detection, and generative AI decision-making to optimize spacecraft trajectories while ensuring mission safety. Built as a full-stack web application, ODIN provides mission planners with an intuitive interface for planning, monitoring, and managing interplanetary missions with features including Lambert problem solving, Hohmann transfer optimization, space weather monitoring, and multilingual support.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for development and build tooling\n- **UI Library**: Radix UI components with shadcn/ui for consistent design system\n- **Styling**: Tailwind CSS with custom ODIN theme featuring space-themed colors (Deep Space Blue, Mission Orange, Lunar Silver)\n- **Design System**: Fluent Design principles optimized for enterprise mission-critical applications\n- **State Management**: TanStack Query for server state management and React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **3D Visualization**: Three.js integration for trajectory and orbital visualization\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL (Neon serverless)\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **Build System**: ESBuild for production bundling, tsx for development\n\n### Database Design\n- **Users**: Authentication and user management\n- **Missions**: Core spacecraft mission tracking with status, progress, and trajectory data\n- **Space Weather**: Historical solar activity and space conditions data\n- **Threat Events**: Detected threats (solar flares, debris, radiation) with severity scoring\n- **AI Decisions**: Logged AI decision-making with reasoning and trade-off analysis\n- **Trajectories**: Calculated orbital paths with fuel efficiency and time optimization\n\n### Core Engineering Modules\n- **Trajectory Engine**: Implements Lambert's problem solver, Hohmann transfers, and fuel optimization calculations\n- **Threat Detection**: Real-time monitoring of solar flares, space debris, and radiation exposure\n- **AI Decision Engine**: Integration points for OpenAI/Anthropic APIs for autonomous decision-making\n- **Unit Conversion**: Robust conversion between user-friendly units (km, hours) and SI base units for calculations\n\n### Key Features\n- **Mission Dashboard**: Real-time mission monitoring with progress tracking and system status\n- **3D Trajectory Viewer**: Interactive orbital visualization with phase-based playback controls\n- **Threat Monitor**: Live threat detection and risk assessment with probability scoring\n- **Decision Log**: AI reasoning documentation with trade-off analysis and confidence metrics\n- **Multilingual Support**: i18n ready with English and Hindi language switching\n\n## External Dependencies\n\n### Database Services\n- **Neon PostgreSQL**: Serverless PostgreSQL database for production data storage\n- **Drizzle Kit**: Database migration and schema management tooling\n\n### UI and Styling\n- **Radix UI**: Headless component primitives for accessible UI components\n- **Tailwind CSS**: Utility-first CSS framework with custom ODIN design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Three.js**: 3D graphics library for orbital trajectory visualization\n\n### Development and Build Tools\n- **Vite**: Fast development server and build tool with HMR support\n- **TypeScript**: Type safety across frontend and backend codebase\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for cross-browser compatibility\n\n### Backend Services\n- **bcrypt**: Secure password hashing for user authentication\n- **TanStack Query**: Server state management with caching and synchronization\n- **Express Session**: Session management for user authentication\n- **Wouter**: Lightweight client-side routing library\n\n### Future Integration Points\n- **NASA APIs**: Space weather data, solar activity monitoring, orbital debris tracking\n- **OpenAI/Anthropic**: Generative AI for autonomous trajectory decision-making\n- **Real-time Data Feeds**: Live space weather and orbital mechanics data sources","size_bytes":4577},"OdinOptimal/design_guidelines.md":{"content":"# ODIN System Design Guidelines\n\n## Design Approach\n**System**: Fluent Design - Selected for this enterprise-grade, data-intensive space mission planning application that requires clear information hierarchy and professional credibility.\n\n## Design Principles\n- **Mission-Critical Clarity**: Clean, unambiguous interface prioritizing operational efficiency\n- **Depth & Dimensionality**: Subtle depth cues using shadows and layering to organize complex data\n- **Contextual Awareness**: Interface adapts based on mission phase and threat levels\n- **Professional Authority**: Design conveys reliability and precision expected in aerospace applications\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Deep Space Blue: `220 85% 15%` (main brand, navigation)\n- Mission Orange: `25 100% 55%` (alerts, primary actions)\n- Lunar Silver: `200 10% 85%` (backgrounds, secondary elements)\n\n**System Status Colors:**\n- Success Green: `120 60% 45%`\n- Warning Amber: `45 100% 60%`\n- Critical Red: `0 85% 55%`\n- Neutral Gray: `210 10% 50%`\n\n**Dark Mode Adaptation:**\n- Background: `220 25% 8%`\n- Surface: `220 15% 12%`\n- Text Primary: `200 15% 92%`\n\n### Typography\n- **Primary**: Inter (Google Fonts) - Modern, technical readability\n- **Data/Code**: JetBrains Mono - For coordinates, calculations, system logs\n- **Hierarchy**: Regular (400), Medium (500), Semibold (600) weights\n\n### Layout System\n**Spacing Units**: Tailwind 2, 4, 8, 16 units for consistent rhythm\n- Compact data: 2-4 units\n- Component spacing: 8 units  \n- Section spacing: 16 units\n- Container max-width: 7xl (1280px)\n\n### Component Library\n\n**Navigation**\n- Top navigation bar with mission status indicator\n- Sidebar with collapsible mission phases\n- Breadcrumbs for deep navigation paths\n\n**Data Display**\n- Trajectory cards with 3D preview thumbnails\n- Real-time telemetry panels with status indicators\n- Weather data grids with severity color coding\n- Decision logs with AI reasoning explanations\n\n**Forms & Controls**\n- Mission parameter inputs with validation\n- Date/time pickers for launch windows\n- Coordinate input fields with format helpers\n- Action buttons with loading states for calculations\n\n**Visualization**\n- Primary 3D trajectory viewer (Three.js integration)\n- Mini trajectory previews in cards\n- Status dashboards with gauge components\n- Timeline visualizations for mission phases\n\n**Overlays**\n- Alert modals for critical threats\n- Calculation progress dialogs\n- Decision confirmation overlays\n- Help tooltips for complex parameters\n\n## Multilingual Considerations\n- Support for Devanagari script with proper font fallbacks\n- RTL-aware layouts where applicable\n- Cultural color sensitivity (avoiding purely Western space metaphors)\n- Technical term consistency across languages\n\n## Visual Hierarchy\n1. **Critical Alerts** - High contrast, immediate attention\n2. **Active Mission Data** - Primary color emphasis\n3. **Navigation & Controls** - Secondary prominence\n4. **Historical/Reference Data** - Muted presentation\n5. **Background Systems** - Minimal visual weight\n\nThe design emphasizes operational clarity over visual flair, ensuring mission-critical information is immediately accessible while maintaining the professional credibility essential for aerospace applications.","size_bytes":3267},"OdinOptimal/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"OdinOptimal/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"OdinOptimal/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // ODIN System Colors\n        \"space-blue\": \"hsl(220 85% 15%)\",\n        \"mission-orange\": \"hsl(25 100% 55%)\",\n        \"lunar-silver\": \"hsl(200 10% 85%)\",\n        \"success-green\": \"hsl(120 60% 45%)\",\n        \"warning-amber\": \"hsl(45 100% 60%)\",\n        \"critical-red\": \"hsl(0 85% 55%)\",\n        \"neutral-gray\": \"hsl(210 10% 50%)\",\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4388},"OdinOptimal/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":995},"OdinOptimal/python_backend/app.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nODIN (Optimal Dynamic Interplanetary Navigator) - Flask Backend\nMain application entry point\n\"\"\"\n\nimport os\nfrom flask import Flask, jsonify\nfrom flask_cors import CORS\nfrom flask_sqlalchemy import SQLAlchemy\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Initialize Flask app\napp = Flask(__name__)\n\n# Configure CORS to allow React frontend\nCORS(app, origins=[\"http://localhost:5000\", \"http://0.0.0.0:5000\", \"https://*.replit.dev\"], supports_credentials=True)\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'odin-development-key')\n\n# Initialize database\ndb = SQLAlchemy(app)\n\n# Import and register API blueprints\nfrom api.missions import missions_bp\nfrom api.trajectory import trajectory_bp\nfrom api.threats import threats_bp\nfrom api.decisions import decisions_bp\n\napp.register_blueprint(missions_bp, url_prefix='/api/missions')\napp.register_blueprint(trajectory_bp, url_prefix='/api/trajectory')\napp.register_blueprint(threats_bp, url_prefix='/api/threats')\napp.register_blueprint(decisions_bp, url_prefix='/api/decisions')\n\n@app.route('/api/health')\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\n        'status': 'healthy',\n        'service': 'ODIN Backend',\n        'version': '1.0.0'\n    })\n\n@app.route('/api/status')\ndef system_status():\n    \"\"\"System status endpoint\"\"\"\n    return jsonify({\n        'database': 'connected',\n        'ai_engine': 'ready',\n        'trajectory_engine': 'initialized',\n        'threat_monitor': 'active'\n    })\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n    \n    port = int(os.getenv('PORT', 3001))\n    app.run(host='0.0.0.0', port=port, debug=True)","size_bytes":1857},"OdinOptimal/server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"OdinOptimal/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"OdinOptimal/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { TrajectoryEngine } from \"./trajectory-engine\";\nimport { insertMissionSchema, insertTrajectorySchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Test route to verify route registration\n  app.get('/api/test', (req, res) => {\n    console.log('Test route hit');\n    console.log('About to send JSON response');\n    res.status(200).set('Content-Type', 'application/json');\n    res.end(JSON.stringify({ message: 'Routes are working!', timestamp: new Date().toISOString() }));\n  });\n  \n  // Authentication routes\n  \n  // User registration\n  app.post('/api/register', async (req, res) => {\n    console.log('Register endpoint hit');\n    try {\n      const { username, password } = req.body;\n      \n      // Validate input\n      if (!username || !password) {\n        return res.status(400).json({ \n          message: 'Username and password are required',\n          error: 'MISSING_FIELDS'\n        });\n      }\n      \n      // Check password strength\n      if (password.length < 8) {\n        return res.status(400).json({ \n          message: 'Password must be at least 8 characters long',\n          error: 'WEAK_PASSWORD'\n        });\n      }\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(409).json({ \n          message: 'Username already exists',\n          error: 'USERNAME_EXISTS'\n        });\n      }\n      \n      // Create user (password will be hashed in storage layer)\n      const newUser = await storage.createUser({ username, password });\n      \n      // Return user without password\n      const { password: _, ...userResponse } = newUser;\n      res.status(201).json({ \n        message: 'User created successfully',\n        user: userResponse \n      });\n      \n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ \n        message: 'Internal server error during registration',\n        error: 'REGISTRATION_FAILED'\n      });\n    }\n  });\n  \n  // User login\n  app.post('/api/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Validate input\n      if (!username || !password) {\n        return res.status(400).json({ \n          message: 'Username and password are required',\n          error: 'MISSING_FIELDS'\n        });\n      }\n      \n      // Verify credentials\n      const user = await storage.verifyPassword(username, password);\n      if (!user) {\n        return res.status(401).json({ \n          message: 'Invalid username or password',\n          error: 'INVALID_CREDENTIALS'\n        });\n      }\n      \n      // Return user without password\n      const { password: _, ...userResponse } = user;\n      res.status(200).json({ \n        message: 'Login successful',\n        user: userResponse\n      });\n      \n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ \n        message: 'Internal server error during login',\n        error: 'LOGIN_FAILED'\n      });\n    }\n  });\n  \n  // Get current user (if implementing session management later)\n  app.get('/api/me', async (req, res) => {\n    // Placeholder for session-based auth\n    res.status(501).json({ \n      message: 'Session management not implemented yet',\n      error: 'NOT_IMPLEMENTED'\n    });\n  });\n\n  // Trajectory Planning Routes\n  \n  // Plan new trajectory for a mission\n  app.post('/api/missions/:missionId/trajectories', async (req, res) => {\n    try {\n      const { missionId } = req.params;\n      const { name, type, launchWindow, flightTime } = req.body;\n      \n      console.log(`Planning trajectory for mission ${missionId}:`, req.body);\n      \n      // Validate input\n      const trajectoryInput = z.object({\n        name: z.string().min(1, 'Trajectory name is required'),\n        type: z.enum(['hohmann', 'lambert', 'bi_elliptic', 'custom']),\n        launchWindow: z.string().transform(str => new Date(str)),\n        flightTime: z.number().min(1).max(720) // 1 to 720 hours (30 days)\n      });\n      \n      const validated = trajectoryInput.parse({ name, type, launchWindow, flightTime });\n      \n      // Check if mission exists\n      const mission = await storage.getMission(missionId);\n      if (!mission) {\n        return res.status(404).json({\n          message: 'Mission not found',\n          error: 'MISSION_NOT_FOUND'\n        });\n      }\n      \n      // Calculate trajectory using the engine\n      const trajectoryResult = TrajectoryEngine.generateEarthMoonTrajectory(\n        validated.launchWindow,\n        validated.type,\n        validated.flightTime\n      );\n      \n      // Create trajectory record\n      const trajectoryRecord = TrajectoryEngine.generateTrajectoryRecord(\n        missionId,\n        validated.name,\n        validated.type,\n        validated.launchWindow,\n        trajectoryResult\n      );\n      \n      // Save to database\n      const savedTrajectory = await storage.createTrajectory(trajectoryRecord);\n      \n      res.status(201).json({\n        message: 'Trajectory calculated successfully',\n        trajectory: savedTrajectory\n      });\n      \n    } catch (error) {\n      console.error('Trajectory calculation error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: 'Invalid input data',\n          errors: error.errors,\n          error: 'VALIDATION_ERROR'\n        });\n      }\n      \n      res.status(500).json({\n        message: 'Internal server error during trajectory calculation',\n        error: 'CALCULATION_FAILED'\n      });\n    }\n  });\n  \n  // Get all trajectories for a mission\n  app.get('/api/missions/:missionId/trajectories', async (req, res) => {\n    try {\n      const { missionId } = req.params;\n      \n      console.log(`Fetching trajectories for mission ${missionId}`);\n      \n      // Check if mission exists\n      const mission = await storage.getMission(missionId);\n      if (!mission) {\n        return res.status(404).json({\n          message: 'Mission not found',\n          error: 'MISSION_NOT_FOUND'\n        });\n      }\n      \n      const trajectories = await storage.getTrajectoriesByMission(missionId);\n      \n      res.status(200).json({\n        message: 'Trajectories retrieved successfully',\n        trajectories,\n        count: trajectories.length\n      });\n      \n    } catch (error) {\n      console.error('Error fetching trajectories:', error);\n      res.status(500).json({\n        message: 'Internal server error fetching trajectories',\n        error: 'FETCH_FAILED'\n      });\n    }\n  });\n  \n  // Get active trajectory for a mission\n  app.get('/api/missions/:missionId/trajectories/active', async (req, res) => {\n    try {\n      const { missionId } = req.params;\n      \n      console.log(`Fetching active trajectory for mission ${missionId}`);\n      \n      const activeTrajectory = await storage.getActiveTrajectoryForMission(missionId);\n      \n      if (!activeTrajectory) {\n        return res.status(404).json({\n          message: 'No active trajectory found for this mission',\n          error: 'NO_ACTIVE_TRAJECTORY'\n        });\n      }\n      \n      res.status(200).json({\n        message: 'Active trajectory retrieved successfully',\n        trajectory: activeTrajectory\n      });\n      \n    } catch (error) {\n      console.error('Error fetching active trajectory:', error);\n      res.status(500).json({\n        message: 'Internal server error fetching active trajectory',\n        error: 'FETCH_FAILED'\n      });\n    }\n  });\n  \n  // Set active trajectory for a mission\n  app.post('/api/missions/:missionId/trajectories/:trajectoryId/activate', async (req, res) => {\n    try {\n      const { missionId, trajectoryId } = req.params;\n      \n      console.log(`Activating trajectory ${trajectoryId} for mission ${missionId}`);\n      \n      // Verify trajectory belongs to mission\n      const trajectory = await storage.getTrajectory(trajectoryId);\n      if (!trajectory || trajectory.missionId !== missionId) {\n        return res.status(404).json({\n          message: 'Trajectory not found or does not belong to this mission',\n          error: 'TRAJECTORY_NOT_FOUND'\n        });\n      }\n      \n      const success = await storage.setActiveTrajectory(missionId, trajectoryId);\n      \n      if (!success) {\n        return res.status(400).json({\n          message: 'Failed to activate trajectory',\n          error: 'ACTIVATION_FAILED'\n        });\n      }\n      \n      res.status(200).json({\n        message: 'Trajectory activated successfully',\n        trajectoryId\n      });\n      \n    } catch (error) {\n      console.error('Error activating trajectory:', error);\n      res.status(500).json({\n        message: 'Internal server error activating trajectory',\n        error: 'ACTIVATION_FAILED'\n      });\n    }\n  });\n  \n  // Mission Management Routes\n  \n  // Create new mission\n  app.post('/api/missions', async (req, res) => {\n    try {\n      const missionData = insertMissionSchema.parse(req.body);\n      \n      console.log('Creating new mission:', missionData);\n      \n      const newMission = await storage.createMission(missionData);\n      \n      res.status(201).json({\n        message: 'Mission created successfully',\n        mission: newMission\n      });\n      \n    } catch (error) {\n      console.error('Mission creation error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: 'Invalid mission data',\n          errors: error.errors,\n          error: 'VALIDATION_ERROR'\n        });\n      }\n      \n      res.status(500).json({\n        message: 'Internal server error creating mission',\n        error: 'CREATION_FAILED'\n      });\n    }\n  });\n  \n  // Get all missions\n  app.get('/api/missions', async (req, res) => {\n    try {\n      const { active } = req.query;\n      \n      console.log('Fetching missions, active filter:', active);\n      \n      let missions;\n      if (active === 'true') {\n        missions = await storage.getActiveMissions();\n      } else {\n        missions = await storage.getAllMissions();\n      }\n      \n      res.status(200).json({\n        message: 'Missions retrieved successfully',\n        missions,\n        count: missions.length\n      });\n      \n    } catch (error) {\n      console.error('Error fetching missions:', error);\n      res.status(500).json({\n        message: 'Internal server error fetching missions',\n        error: 'FETCH_FAILED'\n      });\n    }\n  });\n  \n  // Get mission by ID\n  app.get('/api/missions/:missionId', async (req, res) => {\n    try {\n      const { missionId } = req.params;\n      \n      console.log(`Fetching mission ${missionId}`);\n      \n      const mission = await storage.getMission(missionId);\n      \n      if (!mission) {\n        return res.status(404).json({\n          message: 'Mission not found',\n          error: 'MISSION_NOT_FOUND'\n        });\n      }\n      \n      res.status(200).json({\n        message: 'Mission retrieved successfully',\n        mission\n      });\n      \n    } catch (error) {\n      console.error('Error fetching mission:', error);\n      res.status(500).json({\n        message: 'Internal server error fetching mission',\n        error: 'FETCH_FAILED'\n      });\n    }\n  });\n  \n  // Update mission\n  app.put('/api/missions/:missionId', async (req, res) => {\n    try {\n      const { missionId } = req.params;\n      const updates = req.body;\n      \n      console.log(`Updating mission ${missionId}:`, updates);\n      \n      const updatedMission = await storage.updateMission(missionId, updates);\n      \n      if (!updatedMission) {\n        return res.status(404).json({\n          message: 'Mission not found',\n          error: 'MISSION_NOT_FOUND'\n        });\n      }\n      \n      res.status(200).json({\n        message: 'Mission updated successfully',\n        mission: updatedMission\n      });\n      \n    } catch (error) {\n      console.error('Error updating mission:', error);\n      res.status(500).json({\n        message: 'Internal server error updating mission',\n        error: 'UPDATE_FAILED'\n      });\n    }\n  });\n  \n  // Delete mission\n  app.delete('/api/missions/:missionId', async (req, res) => {\n    try {\n      const { missionId } = req.params;\n      \n      console.log(`Deleting mission ${missionId}`);\n      \n      const success = await storage.deleteMission(missionId);\n      \n      if (!success) {\n        return res.status(404).json({\n          message: 'Mission not found',\n          error: 'MISSION_NOT_FOUND'\n        });\n      }\n      \n      res.status(200).json({\n        message: 'Mission deleted successfully'\n      });\n      \n    } catch (error) {\n      console.error('Error deleting mission:', error);\n      res.status(500).json({\n        message: 'Internal server error deleting mission',\n        error: 'DELETE_FAILED'\n      });\n    }\n  });\n\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.status(200).json({ \n      message: 'ODIN System API is running',\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13219},"OdinOptimal/server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Mission,\n  type InsertMission,\n  type SpaceWeather,\n  type InsertSpaceWeather,\n  type ThreatEvent,\n  type InsertThreatEvent,\n  type AiDecision,\n  type InsertAiDecision,\n  type Trajectory,\n  type InsertTrajectory,\n  users,\n  missions,\n  spaceWeather,\n  threatEvents,\n  aiDecisions,\n  trajectories\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, lte, or } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\n// ODIN System Storage Interface\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  verifyPassword(username: string, password: string): Promise<User | null>;\n\n  // Missions\n  getMission(id: string): Promise<Mission | undefined>;\n  getMissionByMissionId(missionId: string): Promise<Mission | undefined>;\n  getAllMissions(): Promise<Mission[]>;\n  getActiveMissions(): Promise<Mission[]>;\n  createMission(mission: InsertMission): Promise<Mission>;\n  updateMission(id: string, updates: Partial<Mission>): Promise<Mission | undefined>;\n  deleteMission(id: string): Promise<boolean>;\n\n  // Space Weather Data\n  getSpaceWeatherByTimeRange(startTime: Date, endTime: Date): Promise<SpaceWeather[]>;\n  getLatestSpaceWeather(): Promise<SpaceWeather | undefined>;\n  createSpaceWeather(data: InsertSpaceWeather): Promise<SpaceWeather>;\n\n  // Threat Events\n  getThreatEvent(id: string): Promise<ThreatEvent | undefined>;\n  getThreatEventsByMission(missionId: string): Promise<ThreatEvent[]>;\n  getActiveThreatEvents(): Promise<ThreatEvent[]>;\n  createThreatEvent(event: InsertThreatEvent): Promise<ThreatEvent>;\n  updateThreatEvent(id: string, updates: Partial<ThreatEvent>): Promise<ThreatEvent | undefined>;\n  resolveThreatEvent(id: string): Promise<boolean>;\n\n  // AI Decisions\n  getAiDecision(id: string): Promise<AiDecision | undefined>;\n  getAiDecisionsByMission(missionId: string): Promise<AiDecision[]>;\n  getAllAiDecisions(): Promise<AiDecision[]>;\n  createAiDecision(decision: InsertAiDecision): Promise<AiDecision>;\n  updateAiDecision(id: string, updates: Partial<AiDecision>): Promise<AiDecision | undefined>;\n\n  // Trajectories\n  getTrajectory(id: string): Promise<Trajectory | undefined>;\n  getTrajectoriesByMission(missionId: string): Promise<Trajectory[]>;\n  getActiveTrajectoryForMission(missionId: string): Promise<Trajectory | undefined>;\n  createTrajectory(trajectory: InsertTrajectory): Promise<Trajectory>;\n  updateTrajectory(id: string, updates: Partial<Trajectory>): Promise<Trajectory | undefined>;\n  setActiveTrajectory(missionId: string, trajectoryId: string): Promise<boolean>;\n}\n\nexport class PostgresStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash password before storing\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(insertUser.password, saltRounds);\n    \n    const userWithHashedPassword = {\n      ...insertUser,\n      password: hashedPassword\n    };\n    \n    const result = await db.insert(users).values(userWithHashedPassword).returning();\n    return result[0];\n  }\n\n  async verifyPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) {\n      return null;\n    }\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Missions\n  async getMission(id: string): Promise<Mission | undefined> {\n    const result = await db.select().from(missions).where(eq(missions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getMissionByMissionId(missionId: string): Promise<Mission | undefined> {\n    const result = await db.select().from(missions).where(eq(missions.missionId, missionId)).limit(1);\n    return result[0];\n  }\n\n  async getAllMissions(): Promise<Mission[]> {\n    return await db.select().from(missions).orderBy(desc(missions.createdAt));\n  }\n\n  async getActiveMissions(): Promise<Mission[]> {\n    return await db.select().from(missions)\n      .where(or(eq(missions.status, \"active\"), eq(missions.status, \"planning\")))\n      .orderBy(desc(missions.createdAt));\n  }\n\n  async createMission(mission: InsertMission): Promise<Mission> {\n    const result = await db.insert(missions).values(mission).returning();\n    return result[0];\n  }\n\n  async updateMission(id: string, updates: Partial<Mission>): Promise<Mission | undefined> {\n    const result = await db.update(missions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(missions.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteMission(id: string): Promise<boolean> {\n    const result = await db.delete(missions).where(eq(missions.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Space Weather Data\n  async getSpaceWeatherByTimeRange(startTime: Date, endTime: Date): Promise<SpaceWeather[]> {\n    return await db.select().from(spaceWeather)\n      .where(and(\n        gte(spaceWeather.timestamp, startTime),\n        lte(spaceWeather.timestamp, endTime)\n      ))\n      .orderBy(desc(spaceWeather.timestamp));\n  }\n\n  async getLatestSpaceWeather(): Promise<SpaceWeather | undefined> {\n    const result = await db.select().from(spaceWeather)\n      .orderBy(desc(spaceWeather.timestamp))\n      .limit(1);\n    return result[0];\n  }\n\n  async createSpaceWeather(data: InsertSpaceWeather): Promise<SpaceWeather> {\n    const result = await db.insert(spaceWeather).values(data).returning();\n    return result[0];\n  }\n\n  // Threat Events\n  async getThreatEvent(id: string): Promise<ThreatEvent | undefined> {\n    const result = await db.select().from(threatEvents).where(eq(threatEvents.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getThreatEventsByMission(missionId: string): Promise<ThreatEvent[]> {\n    return await db.select().from(threatEvents)\n      .where(eq(threatEvents.missionId, missionId))\n      .orderBy(desc(threatEvents.detectedAt));\n  }\n\n  async getActiveThreatEvents(): Promise<ThreatEvent[]> {\n    return await db.select().from(threatEvents)\n      .where(eq(threatEvents.status, \"active\"))\n      .orderBy(desc(threatEvents.detectedAt));\n  }\n\n  async createThreatEvent(event: InsertThreatEvent): Promise<ThreatEvent> {\n    const result = await db.insert(threatEvents).values(event).returning();\n    return result[0];\n  }\n\n  async updateThreatEvent(id: string, updates: Partial<ThreatEvent>): Promise<ThreatEvent | undefined> {\n    const result = await db.update(threatEvents)\n      .set(updates)\n      .where(eq(threatEvents.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async resolveThreatEvent(id: string): Promise<boolean> {\n    const result = await db.update(threatEvents)\n      .set({ status: \"resolved\", resolvedAt: new Date() })\n      .where(eq(threatEvents.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // AI Decisions\n  async getAiDecision(id: string): Promise<AiDecision | undefined> {\n    const result = await db.select().from(aiDecisions).where(eq(aiDecisions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAiDecisionsByMission(missionId: string): Promise<AiDecision[]> {\n    return await db.select().from(aiDecisions)\n      .where(eq(aiDecisions.missionId, missionId))\n      .orderBy(desc(aiDecisions.timestamp));\n  }\n\n  async getAllAiDecisions(): Promise<AiDecision[]> {\n    return await db.select().from(aiDecisions).orderBy(desc(aiDecisions.timestamp));\n  }\n\n  async createAiDecision(decision: InsertAiDecision): Promise<AiDecision> {\n    const result = await db.insert(aiDecisions).values(decision).returning();\n    return result[0];\n  }\n\n  async updateAiDecision(id: string, updates: Partial<AiDecision>): Promise<AiDecision | undefined> {\n    const result = await db.update(aiDecisions)\n      .set(updates)\n      .where(eq(aiDecisions.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Trajectories\n  async getTrajectory(id: string): Promise<Trajectory | undefined> {\n    const result = await db.select().from(trajectories).where(eq(trajectories.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getTrajectoriesByMission(missionId: string): Promise<Trajectory[]> {\n    return await db.select().from(trajectories)\n      .where(eq(trajectories.missionId, missionId))\n      .orderBy(desc(trajectories.createdAt));\n  }\n\n  async getActiveTrajectoryForMission(missionId: string): Promise<Trajectory | undefined> {\n    const result = await db.select().from(trajectories)\n      .where(and(\n        eq(trajectories.missionId, missionId),\n        eq(trajectories.isActive, true)\n      ))\n      .limit(1);\n    return result[0];\n  }\n\n  async createTrajectory(trajectory: InsertTrajectory): Promise<Trajectory> {\n    const result = await db.insert(trajectories).values(trajectory).returning();\n    return result[0];\n  }\n\n  async updateTrajectory(id: string, updates: Partial<Trajectory>): Promise<Trajectory | undefined> {\n    const result = await db.update(trajectories)\n      .set(updates)\n      .where(eq(trajectories.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async setActiveTrajectory(missionId: string, trajectoryId: string): Promise<boolean> {\n    // Use transaction to prevent race conditions\n    const result = await db.transaction(async (tx) => {\n      // First, deactivate all trajectories for this mission\n      await tx.update(trajectories)\n        .set({ isActive: false })\n        .where(eq(trajectories.missionId, missionId));\n      \n      // Then activate the selected trajectory\n      const updateResult = await tx.update(trajectories)\n        .set({ isActive: true })\n        .where(and(\n          eq(trajectories.id, trajectoryId),\n          eq(trajectories.missionId, missionId)\n        ))\n        .returning();\n      \n      return updateResult.length > 0;\n    });\n    \n    return result;\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":10318},"OdinOptimal/server/trajectory-engine.ts":{"content":"/**\n * ODIN Trajectory Planning Engine\n * Implements Lambert's problem solver, Hohmann transfers, and fuel optimization\n * for Earth-to-Moon trajectory calculations\n */\n\nimport { type InsertTrajectory } from \"@shared/schema\";\n\n/**\n * Unit conversion utilities for trajectory calculations\n * All internal calculations use SI base units (seconds, meters, kilograms)\n * API boundary handles conversion from user-friendly units (hours, kilometers)\n */\nexport class UnitConverter {\n  // Time conversions\n  static readonly SECONDS_PER_HOUR = 3600;\n  static readonly HOURS_PER_SECOND = 1 / 3600;\n  static readonly SECONDS_PER_DAY = 86400;\n  \n  // Distance conversions\n  static readonly METERS_PER_KM = 1000;\n  static readonly KM_PER_METER = 1 / 1000;\n  \n  // Velocity conversions  \n  static readonly MS_PER_KMS = 1000;\n  static readonly KMS_PER_MS = 1 / 1000;\n  \n  /**\n   * Convert time from hours to seconds (API boundary → internal calculations)\n   */\n  static hoursToSeconds(hours: number): number {\n    if (hours < 0) {\n      throw new Error('Time cannot be negative');\n    }\n    if (!isFinite(hours)) {\n      throw new Error('Time must be finite');\n    }\n    return hours * UnitConverter.SECONDS_PER_HOUR;\n  }\n  \n  /**\n   * Convert time from seconds to hours (internal calculations → API boundary)\n   */\n  static secondsToHours(seconds: number): number {\n    if (seconds < 0) {\n      throw new Error('Time cannot be negative');\n    }\n    if (!isFinite(seconds)) {\n      throw new Error('Time must be finite');\n    }\n    return seconds * UnitConverter.HOURS_PER_SECOND;\n  }\n  \n  /**\n   * Convert velocity from km/s to m/s (API boundary → internal calculations)\n   */\n  static kmPerSecToMPerSec(kmPerSec: number): number {\n    if (!isFinite(kmPerSec)) {\n      throw new Error('Velocity must be finite');\n    }\n    return kmPerSec * UnitConverter.MS_PER_KMS;\n  }\n  \n  /**\n   * Convert velocity from m/s to km/s (internal calculations → API boundary)\n   */\n  static mPerSecToKmPerSec(mPerSec: number): number {\n    if (!isFinite(mPerSec)) {\n      throw new Error('Velocity must be finite');\n    }\n    return mPerSec * UnitConverter.KMS_PER_MS;\n  }\n  \n  /**\n   * Validate that a time value is reasonable for space missions\n   */\n  static validateMissionTime(hours: number): void {\n    if (hours < 0.1) {\n      throw new Error('Mission time too short (minimum 6 minutes)');\n    }\n    if (hours > 8760) { // 1 year\n      throw new Error('Mission time too long (maximum 1 year)');\n    }\n  }\n  \n  /**\n   * Validate that a delta-V value is reasonable for space missions\n   */\n  static validateDeltaV(deltaV_kms: number): void {\n    if (deltaV_kms < 0) {\n      throw new Error('Delta-V cannot be negative');\n    }\n    if (deltaV_kms > 20) { // Beyond reasonable chemical propulsion capability\n      throw new Error('Delta-V exceeds reasonable chemical propulsion limits (>20 km/s)');\n    }\n  }\n}\n\n// Physical constants\nexport const CONSTANTS = {\n  // Gravitational parameters (km³/s²)\n  MU_EARTH: 398600.4418, // Earth\n  MU_MOON: 4902.7779,    // Moon\n  \n  // Orbital radii (km)\n  EARTH_RADIUS: 6371,\n  MOON_RADIUS: 1737,\n  EARTH_MOON_DISTANCE: 384400,\n  EARTH_LOW_ORBIT: 200,  // LEO altitude\n  MOON_ORBIT_ALT: 100,   // Lunar orbit altitude\n  \n  // Mission parameters\n  SPECIFIC_IMPULSE: 450,  // seconds (chemical propulsion)\n  SPACECRAFT_DRY_MASS: 5000, // kg\n} as const;\n\n// 3D vector operations\nexport interface Vector3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport class Vector3D {\n  constructor(public x: number, public y: number, public z: number) {}\n  \n  static add(a: Vector3D, b: Vector3D): Vector3D {\n    return new Vector3D(a.x + b.x, a.y + b.y, a.z + b.z);\n  }\n  \n  static subtract(a: Vector3D, b: Vector3D): Vector3D {\n    return new Vector3D(a.x - b.x, a.y - b.y, a.z - b.z);\n  }\n  \n  static multiply(v: Vector3D, scalar: number): Vector3D {\n    return new Vector3D(v.x * scalar, v.y * scalar, v.z * scalar);\n  }\n  \n  static dot(a: Vector3D, b: Vector3D): number {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n  }\n  \n  static cross(a: Vector3D, b: Vector3D): Vector3D {\n    return new Vector3D(\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x\n    );\n  }\n  \n  magnitude(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n  \n  normalize(): Vector3D {\n    const mag = this.magnitude();\n    return new Vector3D(this.x / mag, this.y / mag, this.z / mag);\n  }\n}\n\n// Orbital elements structure\nexport interface OrbitalElements {\n  semiMajorAxis: number;    // km\n  eccentricity: number;     // dimensionless\n  inclination: number;      // degrees\n  rightAscension: number;   // degrees\n  argOfPerigee: number;     // degrees\n  trueAnomaly: number;      // degrees\n}\n\n// Trajectory calculation result\nexport interface TrajectoryResult {\n  totalDeltaV: number;        // km/s\n  flightTime: number;         // hours\n  fuelMass: number;           // kg\n  efficiency: number;         // percentage\n  trajectoryPoints: Vector3D[];\n  orbitalElements: OrbitalElements[];\n  riskFactors: string[];\n  calculations: {\n    hohmannTransfer?: HohmannResult;\n    lambertSolution?: LambertResult;\n    fuelOptimization: FuelOptimization;\n  };\n}\n\nexport interface HohmannResult {\n  deltaV1: number;    // km/s - departure burn\n  deltaV2: number;    // km/s - arrival burn\n  transferTime: number; // hours\n  transferOrbit: OrbitalElements;\n}\n\nexport interface LambertResult {\n  velocityDeparture: Vector3D;\n  velocityArrival: Vector3D;\n  convergenceIterations: number;\n  solutionType: 'prograde' | 'retrograde';\n}\n\nexport interface FuelOptimization {\n  massRatio: number;\n  propellantMass: number;\n  specificImpulse: number;\n  burnTime: number;\n}\n\nexport interface PatchedConicDetails {\n  lunarSOI: number;           // Lunar sphere of influence radius (km)\n  v_infinity: number;         // Hyperbolic excess velocity relative to Moon (km/s)\n  v_at_soi_earth_frame: number; // Velocity at SOI boundary in Earth frame (km/s)\n  v_soi_entry_lunar_frame: number; // Velocity at SOI entry in lunar frame (km/s)\n  moon_orbital_velocity: number;   // Moon's orbital velocity around Earth (km/s)\n  energy_balance_check: boolean;   // Validates energy conservation in calculations\n}\n\nexport interface LOIResult {\n  strategy: 'direct' | 'capture_orbit' | 'weak_stability_boundary';\n  totalDeltaV: number;         // Total LOI delta-V requirement (km/s)\n  captureOrbitDeltaV: number;  // Initial capture delta-V (km/s)\n  insertionDeltaV: number;     // Final insertion delta-V (km/s)\n  captureOrbitElements: OrbitalElements; // Intermediate capture orbit\n  finalOrbitElements: OrbitalElements;   // Final circular orbit\n  totalTime: number;           // Total time for LOI sequence (hours)\n  fuelEfficiency: number;      // Efficiency compared to direct insertion (%)\n  feasibility: {\n    propulsive: boolean;       // Can be achieved with chemical propulsion\n    thermal: boolean;          // Within thermal constraints\n    navigation: boolean;       // Within navigation accuracy requirements\n  };\n}\n\n/**\n * Lambert's Problem Solver - Izzo Algorithm Implementation\n * Based on \"Revisiting Lambert's problem\" by Dario Izzo (2015)\n * This is the aerospace industry standard for Lambert problem solving\n */\nexport class LambertSolver {\n  static solve(\n    r1: Vector3D, \n    r2: Vector3D, \n    timeOfFlight: number, \n    mu: number = CONSTANTS.MU_EARTH,\n    prograde: boolean = true,\n    multiRevs: number = 0\n  ): LambertResult {\n    const tolerance = 1e-14;\n    const maxIterations = 30;\n    \n    const r1_mag = r1.magnitude();\n    const r2_mag = r2.magnitude();\n    \n    // Input validation\n    if (r1_mag < 1e-6 || r2_mag < 1e-6) {\n      throw new Error('Invalid position vectors: magnitudes too small');\n    }\n    if (timeOfFlight <= 0) {\n      throw new Error('Time of flight must be positive');\n    }\n    if (mu <= 0) {\n      throw new Error('Gravitational parameter must be positive');\n    }\n    \n    // Calculate chord and semiperimeter\n    const c = Vector3D.subtract(r2, r1).magnitude();\n    const s = (r1_mag + r2_mag + c) / 2.0;\n    \n    if (c < 1e-6) {\n      throw new Error('Degenerate Lambert problem: positions too close');\n    }\n    \n    // Calculate transfer angle using proper vector operations\n    const cos_dnu = Vector3D.dot(r1, r2) / (r1_mag * r2_mag);\n    const cos_dnu_clamped = Math.max(-1.0, Math.min(1.0, cos_dnu));\n    \n    // Determine transfer direction\n    const cross_product = Vector3D.cross(r1, r2);\n    const sin_dnu = cross_product.magnitude() / (r1_mag * r2_mag);\n    \n    let dnu: number;\n    if (prograde) {\n      // Short way (< π)\n      dnu = Math.atan2(sin_dnu, cos_dnu_clamped);\n      if (dnu < 0) dnu += 2 * Math.PI;\n    } else {\n      // Long way (> π)  \n      dnu = Math.atan2(sin_dnu, cos_dnu_clamped);\n      if (dnu < 0) dnu += 2 * Math.PI;\n      dnu = 2 * Math.PI - dnu;\n    }\n    \n    // Normalized time of flight\n    const T = Math.sqrt(2 * mu / (s * s * s)) * timeOfFlight;\n    \n    // Calculate lambda and alpha parameters (Izzo formulation)\n    const lambda = Math.sqrt(r1_mag * r2_mag) * Math.cos(dnu / 2.0) / s;\n    \n    // Check for impossible geometry\n    if (Math.abs(lambda) >= 1.0) {\n      throw new Error('Lambert problem: impossible geometry (lambda >= 1)');\n    }\n    \n    // Solve for x using householder iteration (Izzo method)\n    let x: number;\n    \n    if (multiRevs === 0) {\n      // Single revolution case\n      const T_min = IzzoSolver.computeMinimumEnergyTime(lambda);\n      \n      if (T < T_min) {\n        throw new Error(`Time of flight too short. Minimum: ${T_min}, given: ${T}`);\n      }\n      \n      x = IzzoSolver.solveForX(lambda, T, tolerance, maxIterations);\n    } else {\n      // Multi-revolution case (not commonly used for Earth-Moon transfers)\n      throw new Error('Multi-revolution Lambert transfers not implemented');\n    }\n    \n    // Calculate Lagrange coefficients using exact Izzo formulation\n    const { f, g, fdot, gdot } = IzzoSolver.calculateLagrangeCoefficients(\n      x, lambda, r1_mag, r2_mag, s, T, timeOfFlight, mu\n    );\n    \n    // Verify fundamental theorem of orbital mechanics (conservation check)\n    const determinant = f * gdot - fdot * g;\n    if (Math.abs(determinant - 1.0) > 1e-10) {\n      console.warn(`Lagrange coefficients determinant error: ${Math.abs(determinant - 1.0)}`);\n    }\n    \n    // Calculate velocity vectors\n    if (Math.abs(g) < 1e-15) {\n      throw new Error('Lambert solver: g coefficient too small, singular solution');\n    }\n    \n    const v1 = Vector3D.multiply(\n      Vector3D.subtract(r2, Vector3D.multiply(r1, f)), \n      1.0 / g\n    );\n    \n    const v2 = Vector3D.add(\n      Vector3D.multiply(v1, fdot),\n      Vector3D.multiply(r1, gdot / g)\n    );\n    \n    return {\n      velocityDeparture: v1,\n      velocityArrival: v2,\n      convergenceIterations: maxIterations, // Placeholder - Izzo typically converges very fast\n      solutionType: prograde ? 'prograde' : 'retrograde'\n    };\n  }\n}\n\n/**\n * Core Izzo algorithm implementation\n * Separated for clarity and numerical stability\n */\nclass IzzoSolver {\n  /**\n   * Compute minimum energy transfer time (parabolic limit)\n   */\n  static computeMinimumEnergyTime(lambda: number): number {\n    const T_min = (1.0 / 3.0) * (1.0 - lambda * lambda * lambda);\n    return T_min;\n  }\n  \n  /**\n   * Solve for the x parameter using Householder's method\n   * This is the core of the Izzo algorithm\n   */\n  static solveForX(lambda: number, T: number, tolerance: number, maxIterations: number): number {\n    // Initial guess based on Izzo's recommendation\n    let x: number;\n    \n    if (T >= (1.0 / 3.0)) {\n      // High energy transfer\n      x = Math.pow(T * 3.0, 1.0 / 3.0) - 1.0;\n    } else {\n      // Low energy transfer  \n      x = 5.0 * T * T * T / (2.0 * (1.0 - lambda * lambda * lambda));\n    }\n    \n    let iterations = 0;\n    let converged = false;\n    \n    while (iterations < maxIterations && !converged) {\n      // Calculate y(x) and derivatives\n      const y = IzzoSolver.calculateY(x, lambda);\n      const T_computed = IzzoSolver.calculateTime(x, y);\n      \n      // Function value\n      const F = T_computed - T;\n      \n      if (Math.abs(F) < tolerance) {\n        converged = true;\n        break;\n      }\n      \n      // Calculate derivatives for Householder iteration\n      const dT_dx = IzzoSolver.calculateTimeDerivative(x, y);\n      const d2T_dx2 = IzzoSolver.calculateTimeSecondDerivative(x, y, lambda);\n      \n      // Householder's method (cubic convergence)\n      const denominator = dT_dx - F * d2T_dx2 / (2.0 * dT_dx);\n      \n      if (Math.abs(denominator) < 1e-15) {\n        throw new Error('Izzo solver: derivative too small in Householder iteration');\n      }\n      \n      const delta_x = -F / denominator;\n      \n      // Apply step with bounds to ensure stability\n      const max_step = 0.5;\n      const limited_delta = Math.sign(delta_x) * Math.min(Math.abs(delta_x), max_step);\n      \n      x += limited_delta;\n      \n      // Ensure x stays in valid range\n      x = Math.max(-1.0, Math.min(x, 50.0));\n      \n      iterations++;\n    }\n    \n    if (!converged) {\n      throw new Error(`Izzo solver did not converge after ${maxIterations} iterations`);\n    }\n    \n    return x;\n  }\n  \n  /**\n   * Calculate y parameter from x and lambda\n   */\n  static calculateY(x: number, lambda: number): number {\n    return Math.sqrt(1.0 - lambda * lambda * (1.0 - x * x));\n  }\n  \n  /**\n   * Calculate normalized time from x and y\n   */\n  static calculateTime(x: number, y: number): number {\n    if (x < 0) {\n      // Hyperbolic case\n      const sqrt_neg_x = Math.sqrt(-x);\n      return (Math.asinh(sqrt_neg_x * y) + sqrt_neg_x * y) / Math.pow(-x, 1.5);\n    } else if (x > 0) {\n      // Elliptical case\n      const sqrt_x = Math.sqrt(x);\n      if (sqrt_x * y <= 1.0) {\n        return (Math.asin(sqrt_x * y) + sqrt_x * y) / Math.pow(x, 1.5);\n      } else {\n        // Use alternative formulation to avoid numerical issues\n        return (Math.PI - Math.asin(sqrt_x * y) + sqrt_x * y) / Math.pow(x, 1.5);\n      }\n    } else {\n      // Parabolic case (x = 0)\n      return (2.0 / 3.0) * (1.0 - y * y * y);\n    }\n  }\n  \n  /**\n   * Calculate first derivative of time with respect to x\n   */\n  static calculateTimeDerivative(x: number, y: number): number {\n    if (x < 0) {\n      // Hyperbolic case\n      const sqrt_neg_x = Math.sqrt(-x);\n      return (3.0 * Math.asinh(sqrt_neg_x * y) + 3.0 * sqrt_neg_x * y + \n              sqrt_neg_x * y * y * y) / (2.0 * Math.pow(-x, 2.5));\n    } else if (x > 0) {\n      // Elliptical case\n      const sqrt_x = Math.sqrt(x);\n      if (sqrt_x * y <= 1.0) {\n        return (3.0 * Math.asin(sqrt_x * y) + 3.0 * sqrt_x * y - \n                sqrt_x * y * y * y) / (2.0 * Math.pow(x, 2.5));\n      } else {\n        return (3.0 * (Math.PI - Math.asin(sqrt_x * y)) + 3.0 * sqrt_x * y - \n                sqrt_x * y * y * y) / (2.0 * Math.pow(x, 2.5));\n      }\n    } else {\n      // Parabolic case\n      return -y * y;\n    }\n  }\n  \n  /**\n   * Calculate second derivative of time with respect to x\n   */\n  static calculateTimeSecondDerivative(x: number, y: number, lambda: number): number {\n    const epsilon = 1e-8;\n    \n    // Use finite differences for robustness\n    const dT_dx_plus = IzzoSolver.calculateTimeDerivative(x + epsilon, IzzoSolver.calculateY(x + epsilon, lambda));\n    const dT_dx_minus = IzzoSolver.calculateTimeDerivative(x - epsilon, IzzoSolver.calculateY(x - epsilon, lambda));\n    \n    return (dT_dx_plus - dT_dx_minus) / (2.0 * epsilon);\n  }\n  \n  /**\n   * Calculate Lagrange coefficients from solution\n   */\n  static calculateLagrangeCoefficients(\n    x: number, \n    lambda: number, \n    r1_mag: number, \n    r2_mag: number, \n    s: number, \n    T: number, \n    timeOfFlight: number, \n    mu: number\n  ): { f: number; g: number; fdot: number; gdot: number } {\n    \n    const y = IzzoSolver.calculateY(x, lambda);\n    \n    // Semi-major axis of transfer orbit\n    const a = s / (2.0 * (1.0 - x * x));\n    \n    if (a <= 0) {\n      throw new Error('Invalid semi-major axis in Lagrange coefficient calculation');\n    }\n    \n    // Lagrange coefficients (exact Izzo formulation)\n    const sqrt_mu = Math.sqrt(mu);\n    const sqrt_a = Math.sqrt(a);\n    \n    const f = 1.0 - (a / r1_mag) * (1.0 - x * x);\n    const g = a * (s - r1_mag - r2_mag) * sqrt_a / (sqrt_mu * r1_mag * y);\n    const gdot = 1.0 - (a / r2_mag) * (1.0 - x * x);\n    \n    // Calculate fdot using the constraint equation\n    const fdot = (f * gdot - 1.0) / g;\n    \n    return { f, g, fdot, gdot };\n  }\n}\n\n/**\n * Stumpff functions for universal variable method\n */\nfunction stumpffFunctions(z: number): [number, number] {\n  if (z > 0) {\n    const sqrt_z = Math.sqrt(z);\n    const S = (sqrt_z - Math.sin(sqrt_z)) / Math.pow(sqrt_z, 3);\n    const C = (1 - Math.cos(sqrt_z)) / z;\n    return [S, C];\n  } else if (z < 0) {\n    const sqrt_neg_z = Math.sqrt(-z);\n    const S = (Math.sinh(sqrt_neg_z) - sqrt_neg_z) / Math.pow(sqrt_neg_z, 3);\n    const C = (Math.cosh(sqrt_neg_z) - 1) / (-z);\n    return [S, C];\n  } else {\n    return [1/6, 1/2];\n  }\n}\n\n/**\n * Hohmann Transfer Calculator with Patched Conic Model\n * Calculates Earth-Moon transfers considering lunar sphere of influence\n */\nexport class HohmannTransfer {\n  // Calculate lunar sphere of influence radius\n  static getLunarSOI(): number {\n    const earthMoonDistance = CONSTANTS.EARTH_MOON_DISTANCE;\n    const massRatio = CONSTANTS.MU_MOON / CONSTANTS.MU_EARTH;\n    return earthMoonDistance * Math.pow(massRatio, 2/5); // Hill sphere approximation\n  }\n  \n  static calculate(\n    r1: number, // Initial orbit radius (km)\n    r2: number, // Final orbit radius (km)\n    mu: number = CONSTANTS.MU_EARTH\n  ): HohmannResult {\n    const a_transfer = (r1 + r2) / 2;\n    \n    // Velocities\n    const v1_circular = Math.sqrt(mu / r1);\n    const v2_circular = Math.sqrt(mu / r2);\n    const v1_transfer = Math.sqrt(mu * (2 / r1 - 1 / a_transfer));\n    const v2_transfer = Math.sqrt(mu * (2 / r2 - 1 / a_transfer));\n    \n    // Delta-V requirements\n    const deltaV1 = Math.abs(v1_transfer - v1_circular);\n    const deltaV2 = Math.abs(v2_circular - v2_transfer);\n    \n    // Transfer time (half period of transfer ellipse) - calculated in seconds, converted to hours\n    const transferTimeSeconds = Math.PI * Math.sqrt(Math.pow(a_transfer, 3) / mu);\n    const transferTime = UnitConverter.secondsToHours(transferTimeSeconds);\n    \n    const transferOrbit: OrbitalElements = {\n      semiMajorAxis: a_transfer,\n      eccentricity: Math.abs(r2 - r1) / (r1 + r2),\n      inclination: 0,\n      rightAscension: 0,\n      argOfPerigee: 0,\n      trueAnomaly: 0\n    };\n    \n    return {\n      deltaV1,\n      deltaV2,\n      transferTime,\n      transferOrbit\n    };\n  }\n  \n  /**\n   * Earth-Moon Patched Conic Transfer - Production Implementation\n   * Uses proper aerospace engineering methods for trajectory calculation\n   * Implements proper lunar SOI handling, v∞ matching, and energy conservation\n   */\n  static calculateEarthMoonTransfer(): {\n    earthEscape: HohmannResult;\n    lunarCapture: HohmannResult;\n    totalDeltaV: number;\n    totalTime: number;\n    lunarSOI: number;\n    v_infinity: number;\n    patchedConicDetails: PatchedConicDetails;\n  } {\n    const r_earth_parking = CONSTANTS.EARTH_RADIUS + CONSTANTS.EARTH_LOW_ORBIT;\n    const r_moon_parking = CONSTANTS.MOON_RADIUS + CONSTANTS.MOON_ORBIT_ALT;\n    \n    // Calculate lunar sphere of influence using refined Hill sphere model\n    const lunarSOI = this.getLunarSOI();\n    \n    // Earth-Moon system parameters\n    const r_earth_moon = CONSTANTS.EARTH_MOON_DISTANCE;\n    const r_soi_boundary = r_earth_moon - lunarSOI; // SOI boundary from Earth center\n    \n    // Phase 1: Earth departure to lunar SOI boundary\n    // Calculate required velocity at Earth departure for specific energy\n    const v_earth_circular = Math.sqrt(CONSTANTS.MU_EARTH / r_earth_parking);\n    \n    // Energy required to reach lunar SOI boundary\n    const specific_energy_transfer = -CONSTANTS.MU_EARTH / (2 * r_soi_boundary);\n    \n    // Velocity at departure to achieve this energy\n    const v_departure_magnitude = Math.sqrt(2 * (specific_energy_transfer + CONSTANTS.MU_EARTH / r_earth_parking));\n    \n    // Earth escape delta-V\n    const deltaV_earth_escape = v_departure_magnitude - v_earth_circular;\n    \n    // Velocity at SOI boundary relative to Earth\n    const v_at_soi_earth_frame = Math.sqrt(2 * CONSTANTS.MU_EARTH / r_soi_boundary);\n    \n    // Moon's orbital velocity around Earth (circular approximation)\n    const v_moon_orbital = Math.sqrt(CONSTANTS.MU_EARTH / r_earth_moon);\n    \n    // Hyperbolic excess velocity relative to Moon (v∞)\n    // This is the key parameter for patched conic method\n    const v_infinity = Math.abs(v_at_soi_earth_frame - v_moon_orbital);\n    \n    // Phase 2: Lunar SOI entry to lunar parking orbit\n    // Velocity at SOI entry relative to Moon (from hyperbolic trajectory)\n    const v_soi_entry_lunar_frame = Math.sqrt(v_infinity * v_infinity + 2 * CONSTANTS.MU_MOON / lunarSOI);\n    \n    // Periapsis velocity for lunar capture orbit (periapsis at desired parking orbit)\n    const v_periapsis_capture = Math.sqrt(CONSTANTS.MU_MOON * (2 / r_moon_parking - 2 / (lunarSOI + r_moon_parking)));\n    \n    // Circular velocity at lunar parking orbit\n    const v_lunar_circular = Math.sqrt(CONSTANTS.MU_MOON / r_moon_parking);\n    \n    // Lunar capture delta-V (hyperbolic to elliptical capture orbit)\n    const deltaV_lunar_capture = v_soi_entry_lunar_frame - v_periapsis_capture;\n    \n    // Lunar orbit insertion delta-V (elliptical capture to circular)\n    const deltaV_lunar_insertion = v_periapsis_capture - v_lunar_circular;\n    \n    // Total lunar delta-V\n    const total_lunar_deltaV = deltaV_lunar_capture + deltaV_lunar_insertion;\n    \n    // Calculate transfer times using proper orbital mechanics\n    const earthTransferTime = this.calculateTransferTime(r_earth_parking, r_soi_boundary, CONSTANTS.MU_EARTH);\n    const lunarCaptureTime = this.calculateLunarCaptureTime(lunarSOI, r_moon_parking, v_infinity);\n    \n    // Create results with proper orbital elements\n    const earthEscape: HohmannResult = {\n      deltaV1: deltaV_earth_escape,\n      deltaV2: 0, // Single burn for Earth escape in this model\n      transferTime: UnitConverter.secondsToHours(earthTransferTime),\n      transferOrbit: {\n        semiMajorAxis: (r_earth_parking + r_soi_boundary) / 2,\n        eccentricity: Math.abs(r_soi_boundary - r_earth_parking) / (r_earth_parking + r_soi_boundary),\n        inclination: 0, // Simplified for equatorial transfer\n        rightAscension: 0,\n        argOfPerigee: 0,\n        trueAnomaly: 0\n      }\n    };\n    \n    const lunarCapture: HohmannResult = {\n      deltaV1: deltaV_lunar_capture, // Capture burn\n      deltaV2: deltaV_lunar_insertion, // Orbit insertion burn\n      transferTime: UnitConverter.secondsToHours(lunarCaptureTime),\n      transferOrbit: {\n        semiMajorAxis: (lunarSOI + r_moon_parking) / 2,\n        eccentricity: (lunarSOI - r_moon_parking) / (lunarSOI + r_moon_parking),\n        inclination: 0,\n        rightAscension: 0,\n        argOfPerigee: 0,\n        trueAnomaly: 0\n      }\n    };\n    \n    const patchedConicDetails: PatchedConicDetails = {\n      lunarSOI,\n      v_infinity,\n      v_at_soi_earth_frame,\n      v_soi_entry_lunar_frame,\n      moon_orbital_velocity: v_moon_orbital,\n      energy_balance_check: this.validateEnergyBalance(\n        r_earth_parking, r_soi_boundary, v_departure_magnitude, v_at_soi_earth_frame\n      )\n    };\n    \n    return {\n      earthEscape,\n      lunarCapture,\n      totalDeltaV: deltaV_earth_escape + total_lunar_deltaV,\n      totalTime: UnitConverter.secondsToHours(earthTransferTime + lunarCaptureTime),\n      lunarSOI,\n      v_infinity,\n      patchedConicDetails\n    };\n  }\n  \n  /**\n   * Calculate transfer time for Earth escape phase using vis-viva equation\n   */\n  private static calculateTransferTime(r1: number, r2: number, mu: number): number {\n    const a = (r1 + r2) / 2; // Semi-major axis of transfer orbit\n    const period = 2 * Math.PI * Math.sqrt(Math.pow(a, 3) / mu);\n    return period / 2; // Half period for transfer\n  }\n  \n  /**\n   * Calculate lunar capture and orbit insertion time\n   */\n  private static calculateLunarCaptureTime(r_soi: number, r_parking: number, v_infinity: number): number {\n    // Time for hyperbolic approach and capture maneuvers\n    // This is an approximation - real missions use detailed trajectory integration\n    const characteristic_time = Math.sqrt(Math.pow(r_soi, 3) / CONSTANTS.MU_MOON);\n    const hyperbolic_factor = 1 + (v_infinity * v_infinity * r_soi) / (2 * CONSTANTS.MU_MOON);\n    \n    return characteristic_time * Math.log(hyperbolic_factor);\n  }\n  \n  /**\n   * Validate energy conservation in patched conic method\n   */\n  private static validateEnergyBalance(r1: number, r2: number, v1: number, v2: number): boolean {\n    const energy1 = v1 * v1 / 2 - CONSTANTS.MU_EARTH / r1;\n    const energy2 = v2 * v2 / 2 - CONSTANTS.MU_EARTH / r2;\n    const energy_error = Math.abs(energy1 - energy2) / Math.abs(energy1);\n    \n    return energy_error < 1e-6; // Energy should be conserved to within numerical precision\n  }\n}\n\n/**\n * Lunar Orbit Insertion (LOI) Calculator - Production Implementation\n * Calculates optimal lunar orbit insertion strategies with realistic delta-V requirements\n * Implements multiple insertion strategies: direct, capture orbit, and weak stability boundary\n */\nexport class LunarOrbitInsertion {\n  /**\n   * Calculate optimal LOI strategy for given approach conditions\n   */\n  static calculateOptimalLOI(\n    v_infinity: number,        // Hyperbolic excess velocity (km/s)\n    r_target: number,          // Target circular orbit radius (km)\n    r_periapsis?: number       // Optional periapsis radius for capture orbit (km)\n  ): LOIResult {\n    \n    // Validate inputs\n    if (v_infinity <= 0 || v_infinity > 5.0) {\n      throw new Error('Hyperbolic excess velocity out of realistic range (0-5 km/s)');\n    }\n    if (r_target <= CONSTANTS.MOON_RADIUS || r_target > CONSTANTS.MOON_RADIUS * 10) {\n      throw new Error('Target orbit radius out of valid range');\n    }\n    \n    // Calculate direct insertion strategy\n    const directResult = this.calculateDirectInsertion(v_infinity, r_target);\n    \n    // Calculate capture orbit strategy (if more efficient)\n    const captureOrbitResult = this.calculateCaptureOrbitInsertion(\n      v_infinity, \n      r_target, \n      r_periapsis || this.getOptimalPeriapsis(v_infinity, r_target)\n    );\n    \n    // Select optimal strategy based on total delta-V\n    if (captureOrbitResult.totalDeltaV < directResult.totalDeltaV) {\n      return {\n        ...captureOrbitResult,\n        strategy: 'capture_orbit',\n        fuelEfficiency: (directResult.totalDeltaV / captureOrbitResult.totalDeltaV - 1) * 100\n      };\n    } else {\n      return {\n        ...directResult,\n        strategy: 'direct',\n        fuelEfficiency: 100 // Reference efficiency\n      };\n    }\n  }\n  \n  /**\n   * Calculate direct insertion to circular orbit\n   */\n  private static calculateDirectInsertion(v_infinity: number, r_target: number): LOIResult {\n    // Velocity at periapsis of hyperbolic approach\n    const v_periapsis_hyperbolic = Math.sqrt(v_infinity * v_infinity + 2 * CONSTANTS.MU_MOON / r_target);\n    \n    // Circular orbital velocity at target altitude\n    const v_circular = Math.sqrt(CONSTANTS.MU_MOON / r_target);\n    \n    // Required delta-V for direct insertion\n    const totalDeltaV = v_periapsis_hyperbolic - v_circular;\n    \n    // Validate delta-V is realistic for chemical propulsion\n    const feasibility = this.assessFeasibility(totalDeltaV, r_target);\n    \n    const finalOrbitElements: OrbitalElements = {\n      semiMajorAxis: r_target,\n      eccentricity: 0,\n      inclination: 0, // Simplified - actual missions consider inclination\n      rightAscension: 0,\n      argOfPerigee: 0,\n      trueAnomaly: 0\n    };\n    \n    return {\n      strategy: 'direct',\n      totalDeltaV,\n      captureOrbitDeltaV: 0,\n      insertionDeltaV: totalDeltaV,\n      captureOrbitElements: finalOrbitElements, // Same as final for direct insertion\n      finalOrbitElements,\n      totalTime: 0.1, // Instantaneous burn approximation\n      fuelEfficiency: 100,\n      feasibility\n    };\n  }\n  \n  /**\n   * Calculate two-burn capture orbit insertion\n   */\n  private static calculateCaptureOrbitInsertion(\n    v_infinity: number, \n    r_target: number, \n    r_periapsis: number\n  ): LOIResult {\n    \n    // Velocity at periapsis of hyperbolic approach\n    const v_periapsis_hyperbolic = Math.sqrt(v_infinity * v_infinity + 2 * CONSTANTS.MU_MOON / r_periapsis);\n    \n    // Calculate capture orbit apoapsis for target circular orbit energy matching\n    const specific_energy_target = -CONSTANTS.MU_MOON / (2 * r_target);\n    const v_periapsis_capture = Math.sqrt(2 * (specific_energy_target + CONSTANTS.MU_MOON / r_periapsis));\n    \n    // First burn: hyperbolic to elliptical capture orbit\n    const captureOrbitDeltaV = v_periapsis_hyperbolic - v_periapsis_capture;\n    \n    // Calculate capture orbit apoapsis\n    const r_apoapsis = CONSTANTS.MU_MOON / (2 * specific_energy_target) - r_periapsis;\n    \n    // If apoapsis is unrealistic, adjust calculation\n    if (r_apoapsis > CONSTANTS.MOON_RADIUS * 100) {\n      // Use bi-elliptic transfer principles for high-energy cases\n      return this.calculateHighEnergyCapture(v_infinity, r_target, r_periapsis);\n    }\n    \n    // Velocity at apoapsis of capture orbit\n    const v_apoapsis_capture = Math.sqrt(2 * (specific_energy_target + CONSTANTS.MU_MOON / r_apoapsis));\n    \n    // Circular velocity at target orbit\n    const v_circular = Math.sqrt(CONSTANTS.MU_MOON / r_target);\n    \n    // Second burn: elliptical to circular at target altitude\n    // Assumes target orbit is at apoapsis of capture orbit\n    const insertionDeltaV = Math.abs(v_circular - v_apoapsis_capture);\n    \n    const totalDeltaV = captureOrbitDeltaV + insertionDeltaV;\n    \n    // Calculate orbital period for timing\n    const a_capture = (r_periapsis + r_apoapsis) / 2;\n    const period_capture = 2 * Math.PI * Math.sqrt(Math.pow(a_capture, 3) / CONSTANTS.MU_MOON);\n    const totalTime = UnitConverter.secondsToHours(period_capture / 2); // Half orbit to apoapsis\n    \n    const captureOrbitElements: OrbitalElements = {\n      semiMajorAxis: a_capture,\n      eccentricity: (r_apoapsis - r_periapsis) / (r_apoapsis + r_periapsis),\n      inclination: 0,\n      rightAscension: 0,\n      argOfPerigee: 0,\n      trueAnomaly: 0\n    };\n    \n    const finalOrbitElements: OrbitalElements = {\n      semiMajorAxis: r_target,\n      eccentricity: 0,\n      inclination: 0,\n      rightAscension: 0,\n      argOfPerigee: 0,\n      trueAnomaly: 0\n    };\n    \n    const feasibility = this.assessFeasibility(totalDeltaV, r_target);\n    \n    return {\n      strategy: 'capture_orbit',\n      totalDeltaV,\n      captureOrbitDeltaV,\n      insertionDeltaV,\n      captureOrbitElements,\n      finalOrbitElements,\n      totalTime,\n      fuelEfficiency: 0, // Will be calculated relative to direct insertion\n      feasibility\n    };\n  }\n  \n  /**\n   * Handle high-energy capture scenarios using bi-elliptic-like principles\n   */\n  private static calculateHighEnergyCapture(\n    v_infinity: number, \n    r_target: number, \n    r_periapsis: number\n  ): LOIResult {\n    \n    // For very high energy approaches, use extended capture orbit\n    const r_intermediate = r_target * 3; // Intermediate apoapsis\n    \n    // Calculate intermediate elliptical orbit\n    const v_periapsis_hyperbolic = Math.sqrt(v_infinity * v_infinity + 2 * CONSTANTS.MU_MOON / r_periapsis);\n    const energy_intermediate = -CONSTANTS.MU_MOON / (r_periapsis + r_intermediate);\n    const v_periapsis_intermediate = Math.sqrt(2 * (energy_intermediate + CONSTANTS.MU_MOON / r_periapsis));\n    \n    // First burn: capture to intermediate orbit\n    const captureOrbitDeltaV = v_periapsis_hyperbolic - v_periapsis_intermediate;\n    \n    // Second burn: intermediate to target circular orbit\n    const v_intermediate = Math.sqrt(CONSTANTS.MU_MOON * (2 / r_intermediate - 2 / (r_periapsis + r_intermediate)));\n    const v_circular = Math.sqrt(CONSTANTS.MU_MOON / r_target);\n    const insertionDeltaV = Math.abs(v_circular - v_intermediate);\n    \n    const totalDeltaV = captureOrbitDeltaV + insertionDeltaV;\n    \n    // Calculate timing\n    const a_intermediate = (r_periapsis + r_intermediate) / 2;\n    const period = 2 * Math.PI * Math.sqrt(Math.pow(a_intermediate, 3) / CONSTANTS.MU_MOON);\n    const totalTime = UnitConverter.secondsToHours(period);\n    \n    const captureOrbitElements: OrbitalElements = {\n      semiMajorAxis: a_intermediate,\n      eccentricity: (r_intermediate - r_periapsis) / (r_intermediate + r_periapsis),\n      inclination: 0,\n      rightAscension: 0,\n      argOfPerigee: 0,\n      trueAnomaly: 0\n    };\n    \n    const finalOrbitElements: OrbitalElements = {\n      semiMajorAxis: r_target,\n      eccentricity: 0,\n      inclination: 0,\n      rightAscension: 0,\n      argOfPerigee: 0,\n      trueAnomaly: 0\n    };\n    \n    const feasibility = this.assessFeasibility(totalDeltaV, r_target);\n    \n    return {\n      strategy: 'capture_orbit',\n      totalDeltaV,\n      captureOrbitDeltaV,\n      insertionDeltaV,\n      captureOrbitElements,\n      finalOrbitElements,\n      totalTime,\n      fuelEfficiency: 0,\n      feasibility\n    };\n  }\n  \n  /**\n   * Determine optimal periapsis for capture orbit strategy\n   */\n  private static getOptimalPeriapsis(v_infinity: number, r_target: number): number {\n    // Optimal periapsis balances gravity losses vs. thermal constraints\n    // Lower periapsis = higher velocity = more gravity losses but shorter time\n    const min_periapsis = CONSTANTS.MOON_RADIUS + 15; // 15 km minimum altitude\n    const max_periapsis = r_target * 0.8; // Don't go too close to target\n    \n    // For high v_infinity, prefer higher periapsis to reduce thermal stress\n    const thermal_factor = Math.min(v_infinity / 2.0, 1.0);\n    const optimal_periapsis = min_periapsis + thermal_factor * (max_periapsis - min_periapsis);\n    \n    return optimal_periapsis;\n  }\n  \n  /**\n   * Assess feasibility of LOI strategy\n   */\n  private static assessFeasibility(totalDeltaV: number, r_target: number): LOIResult['feasibility'] {\n    return {\n      propulsive: totalDeltaV < 2.5, // Chemical propulsion limit\n      thermal: r_target > CONSTANTS.MOON_RADIUS + 10, // Thermal environment constraint\n      navigation: totalDeltaV < 3.0 // Navigation accuracy for high delta-V maneuvers\n    };\n  }\n}\n\n/**\n * Fuel Optimization Calculator\n * Calculates propellant requirements based on Tsiolkovsky rocket equation\n */\nexport class FuelOptimizer {\n  static calculate(\n    deltaV: number, // Expected in km/s (API units)\n    dryMass: number = CONSTANTS.SPACECRAFT_DRY_MASS, // kg\n    specificImpulse: number = CONSTANTS.SPECIFIC_IMPULSE, // seconds\n    thrustToWeightRatio: number = 0.3 // Typical for space propulsion systems\n  ): FuelOptimization {\n    // Validate inputs\n    UnitConverter.validateDeltaV(deltaV);\n    if (dryMass <= 0 || !isFinite(dryMass)) {\n      throw new Error('Dry mass must be positive and finite');\n    }\n    if (specificImpulse <= 0 || !isFinite(specificImpulse)) {\n      throw new Error('Specific impulse must be positive and finite');\n    }\n    if (thrustToWeightRatio <= 0 || thrustToWeightRatio > 2.0) {\n      throw new Error('Thrust-to-weight ratio must be between 0 and 2.0');\n    }\n    \n    // Convert delta-V from km/s to m/s for physics calculations\n    const deltaV_ms = UnitConverter.kmPerSecToMPerSec(deltaV);\n    \n    // Standard gravity and exhaust velocity\n    const g0 = 9.80665; // m/s² - standard gravity (ISP reference)\n    const ve = specificImpulse * g0; // effective exhaust velocity m/s\n    \n    // Tsiolkovsky rocket equation: Δv = ve * ln(m0/mf)\n    // Therefore: m0/mf = exp(Δv/ve) = mass ratio\n    const massRatio = Math.exp(deltaV_ms / ve);\n    \n    if (!isFinite(massRatio) || massRatio < 1.0) {\n      throw new Error('Invalid mass ratio calculated from Tsiolkovsky equation');\n    }\n    \n    // Calculate masses\n    const totalMass = dryMass * massRatio; // m0 (initial mass)\n    const propellantMass = totalMass - dryMass; // mp (propellant mass)\n    \n    // Validate propellant mass is reasonable\n    if (propellantMass < 0) {\n      throw new Error('Negative propellant mass calculated');\n    }\n    if (propellantMass > dryMass * 10) {\n      console.warn(`Very high propellant-to-dry mass ratio: ${(propellantMass / dryMass).toFixed(2)}`);\n    }\n    \n    // Calculate realistic burn time using rocket equation: F = dm/dt * ve\n    // For production accuracy, we need to account for variable mass during burn\n    \n    // Two approaches: constant thrust vs constant T/W ratio\n    // Most space missions use constant thrust (engine limitation)\n    const burnTime = this.calculateVariableMassBurnTime(\n      totalMass, \n      dryMass, \n      thrustToWeightRatio, \n      ve, \n      g0\n    );\n    \n    // Validate burn time is realistic for space missions\n    if (burnTime < 0) {\n      throw new Error('Negative burn time calculated');\n    }\n    if (burnTime > UnitConverter.SECONDS_PER_HOUR) {\n      console.warn(`Long burn time ${UnitConverter.secondsToHours(burnTime).toFixed(1)} hours may require multiple burn phases`);\n    }\n    \n    return {\n      massRatio: Number(massRatio.toFixed(4)),\n      propellantMass: Number(propellantMass.toFixed(1)),\n      specificImpulse,\n      burnTime: Number(burnTime.toFixed(1))\n    };\n  }\n  \n  /**\n   * Calculate burn time accounting for variable mass during propellant consumption\n   * Uses integrated rocket equation for production accuracy\n   */\n  private static calculateVariableMassBurnTime(\n    m0: number,         // Initial total mass (kg)\n    mf: number,         // Final dry mass (kg)\n    twRatio: number,    // Initial thrust-to-weight ratio\n    ve: number,         // Exhaust velocity (m/s)\n    g0: number          // Standard gravity (m/s²)\n  ): number {\n    \n    // Initial thrust based on initial mass and T/W ratio\n    const F = twRatio * m0 * g0; // N (constant thrust assumption)\n    \n    // Mass flow rate: dm/dt = -F/ve (negative because mass decreases)\n    const massFlowRate = F / ve; // kg/s\n    \n    // For constant thrust, mass varies linearly: m(t) = m0 - (F/ve) * t\n    // Propellant mass consumed\n    const propellantMass = m0 - mf;\n    \n    // Simple burn time: t = propellant_mass / mass_flow_rate\n    const burnTimeConstantThrust = propellantMass / massFlowRate;\n    \n    // For very high thrust scenarios, account for gravity losses\n    // and finite burn effects using more sophisticated model\n    if (twRatio > 0.5) {\n      // High thrust burns - use integrated rocket equation\n      // Solution to dm/dt = -F/ve with variable acceleration\n      \n      // Characteristic velocity (c*) and gravity loss factor\n      const characteristicVelocity = ve * Math.log(m0 / mf);\n      const gravityLossFactor = this.calculateGravityLossFactor(burnTimeConstantThrust, twRatio);\n      \n      // Corrected burn time accounting for finite burn effects\n      const correctedBurnTime = burnTimeConstantThrust * (1 + gravityLossFactor);\n      \n      return Math.min(correctedBurnTime, burnTimeConstantThrust * 1.2); // Cap at 20% correction\n    }\n    \n    return burnTimeConstantThrust;\n  }\n  \n  /**\n   * Calculate gravity loss factor for finite burn corrections\n   */\n  private static calculateGravityLossFactor(burnTime: number, twRatio: number): number {\n    // Empirical correction for gravity losses during finite burns\n    // Based on aerospace engineering approximations\n    \n    if (burnTime < 60) {\n      return 0; // Very short burns - negligible gravity losses\n    }\n    \n    // Gravity loss factor increases with burn time and decreases with thrust\n    const timeFactor = Math.min(burnTime / 600, 1.0); // Normalize to 10 minutes\n    const thrustFactor = Math.max(0.1, 1.0 / twRatio); // Higher losses for lower thrust\n    \n    return 0.05 * timeFactor * thrustFactor; // Maximum 5% correction\n  }\n  \n  /**\n   * Advanced: Calculate burn time for variable thrust profile\n   * Used for electric propulsion or throttled engines\n   */\n  static calculateVariableThrustBurnTime(\n    deltaV: number,     // Required delta-V (km/s)\n    m0: number,         // Initial mass (kg)\n    mf: number,         // Final mass (kg)\n    thrustProfile: (t: number) => number, // Thrust as function of time\n    ve: number          // Exhaust velocity (m/s)\n  ): number {\n    \n    // This would require numerical integration for complex thrust profiles\n    // For now, return a simplified approximation\n    console.warn('Variable thrust profiles require numerical integration - using constant thrust approximation');\n    \n    const avgThrust = 0.5 * (thrustProfile(0) + thrustProfile(1000)); // Simplified average\n    const massFlowRate = avgThrust / ve;\n    const propellantMass = m0 - mf;\n    \n    return propellantMass / massFlowRate;\n  }\n}\n\n/**\n * Numerical Validation and Error Handling Utilities\n * Provides comprehensive validation for all trajectory calculations\n */\nexport class NumericalValidator {\n  \n  /**\n   * Validate orbital elements are physically meaningful\n   */\n  static validateOrbitalElements(elements: OrbitalElements, centralBody: 'earth' | 'moon'): void {\n    const mu = centralBody === 'earth' ? CONSTANTS.MU_EARTH : CONSTANTS.MU_MOON;\n    const radius = centralBody === 'earth' ? CONSTANTS.EARTH_RADIUS : CONSTANTS.MOON_RADIUS;\n    \n    // Semi-major axis validation\n    if (elements.semiMajorAxis <= radius) {\n      throw new Error(`Semi-major axis ${elements.semiMajorAxis} km is below ${centralBody} surface (${radius} km)`);\n    }\n    if (elements.semiMajorAxis > radius * 1000) {\n      throw new Error(`Semi-major axis ${elements.semiMajorAxis} km is unrealistically large for ${centralBody} system`);\n    }\n    \n    // Eccentricity validation\n    if (elements.eccentricity < 0 || elements.eccentricity >= 1) {\n      throw new Error(`Invalid eccentricity ${elements.eccentricity} - must be in range [0, 1) for elliptical orbits`);\n    }\n    \n    // Periapsis check\n    const periapsis = elements.semiMajorAxis * (1 - elements.eccentricity);\n    if (periapsis <= radius) {\n      throw new Error(`Periapsis ${periapsis} km is below ${centralBody} surface`);\n    }\n    \n    // Inclination validation  \n    if (elements.inclination < 0 || elements.inclination > 180) {\n      throw new Error(`Invalid inclination ${elements.inclination}° - must be in range [0°, 180°]`);\n    }\n    \n    // Angular elements validation\n    if (elements.rightAscension < 0 || elements.rightAscension >= 360) {\n      throw new Error(`Invalid right ascension ${elements.rightAscension}° - must be in range [0°, 360°)`);\n    }\n    if (elements.argOfPerigee < 0 || elements.argOfPerigee >= 360) {\n      throw new Error(`Invalid argument of perigee ${elements.argOfPerigee}° - must be in range [0°, 360°)`);\n    }\n    if (elements.trueAnomaly < 0 || elements.trueAnomaly >= 360) {\n      throw new Error(`Invalid true anomaly ${elements.trueAnomaly}° - must be in range [0°, 360°)`);\n    }\n  }\n  \n  /**\n   * Validate velocity vector is realistic for given position\n   */\n  static validateVelocityVector(position: Vector3D, velocity: Vector3D, centralBody: 'earth' | 'moon'): void {\n    const mu = centralBody === 'earth' ? CONSTANTS.MU_EARTH : CONSTANTS.MU_MOON;\n    const radius = centralBody === 'earth' ? CONSTANTS.EARTH_RADIUS : CONSTANTS.MOON_RADIUS;\n    \n    const r = Math.sqrt(position.x**2 + position.y**2 + position.z**2);\n    const v = Math.sqrt(velocity.x**2 + velocity.y**2 + velocity.z**2);\n    \n    // Position validation\n    if (r <= radius) {\n      throw new Error(`Position ${r} km is below ${centralBody} surface`);\n    }\n    \n    // Escape velocity check\n    const v_escape = Math.sqrt(2 * mu / r);\n    if (v > v_escape * 1.5) {\n      throw new Error(`Velocity ${v} km/s exceeds reasonable limits (1.5x escape velocity: ${v_escape * 1.5} km/s)`);\n    }\n    \n    // Minimum orbital velocity check\n    const v_circular = Math.sqrt(mu / r);\n    if (v < v_circular * 0.1) {\n      throw new Error(`Velocity ${v} km/s is unrealistically low for orbital mechanics`);\n    }\n    \n    // Check for NaN or infinite values\n    if (!isFinite(r) || !isFinite(v)) {\n      throw new Error('Non-finite position or velocity detected');\n    }\n  }\n  \n  /**\n   * Validate transfer trajectory parameters\n   */\n  static validateTransferParameters(r1: number, r2: number, transferTime: number, centralBody: 'earth' | 'moon'): void {\n    const mu = centralBody === 'earth' ? CONSTANTS.MU_EARTH : CONSTANTS.MU_MOON;\n    const radius = centralBody === 'earth' ? CONSTANTS.EARTH_RADIUS : CONSTANTS.MOON_RADIUS;\n    \n    // Orbital radii validation\n    if (r1 <= radius || r2 <= radius) {\n      throw new Error(`Transfer radii must be above ${centralBody} surface (${radius} km)`);\n    }\n    \n    // Transfer time validation\n    if (transferTime <= 0) {\n      throw new Error('Transfer time must be positive');\n    }\n    \n    // Maximum reasonable transfer time (for orbital mechanics)\n    const max_period = 2 * Math.PI * Math.sqrt(Math.pow(Math.max(r1, r2) * 10, 3) / mu);\n    if (transferTime > max_period) {\n      throw new Error(`Transfer time ${transferTime} s exceeds reasonable orbital period limits`);\n    }\n    \n    // Minimum transfer time check (physical constraints)\n    const min_period = 2 * Math.PI * Math.sqrt(Math.pow((r1 + r2) / 2, 3) / mu);\n    if (transferTime < min_period / 4) {\n      throw new Error(`Transfer time ${transferTime} s is too short for given orbital parameters`);\n    }\n  }\n  \n  /**\n   * Validate numerical convergence of iterative algorithms\n   */\n  static validateConvergence(\n    iterations: number, \n    error: number, \n    maxIterations: number = 100, \n    tolerance: number = 1e-12\n  ): void {\n    if (iterations >= maxIterations) {\n      throw new Error(`Algorithm failed to converge within ${maxIterations} iterations (final error: ${error})`);\n    }\n    \n    if (error > tolerance * 1000) {\n      console.warn(`Convergence achieved with relatively large error: ${error} (tolerance: ${tolerance})`);\n    }\n    \n    if (!isFinite(error)) {\n      throw new Error('Non-finite error detected in iterative algorithm');\n    }\n  }\n  \n  /**\n   * Validate delta-V requirements are realistic\n   */\n  static validateDeltaV(deltaV: number, context: string): void {\n    if (deltaV < 0) {\n      throw new Error(`Negative delta-V calculated for ${context}: ${deltaV} km/s`);\n    }\n    \n    if (deltaV > 15) { // Unrealistic for most space missions\n      throw new Error(`Excessive delta-V requirement for ${context}: ${deltaV} km/s (> 15 km/s)`);\n    }\n    \n    if (deltaV > 10) {\n      console.warn(`High delta-V requirement for ${context}: ${deltaV} km/s - verify mission parameters`);\n    }\n    \n    if (!isFinite(deltaV)) {\n      throw new Error(`Non-finite delta-V calculated for ${context}`);\n    }\n  }\n  \n  /**\n   * Validate energy conservation in calculations\n   */\n  static validateEnergyConservation(\n    energy1: number, \n    energy2: number, \n    tolerance: number = 1e-6, \n    context: string = 'calculation'\n  ): void {\n    const energyError = Math.abs(energy1 - energy2) / Math.abs(energy1);\n    \n    if (energyError > tolerance) {\n      throw new Error(`Energy conservation violated in ${context}: error = ${energyError} (tolerance: ${tolerance})`);\n    }\n    \n    if (!isFinite(energy1) || !isFinite(energy2)) {\n      throw new Error(`Non-finite energy values detected in ${context}`);\n    }\n  }\n}\n\n/**\n * Main Trajectory Planning Engine\n * Coordinates all calculations and generates complete trajectory solutions\n */\nexport class TrajectoryEngine {\n  static generateEarthMoonTrajectory(\n    launchDate: Date,\n    transferType: 'hohmann' | 'lambert' | 'bi_elliptic' = 'hohmann',\n    flightTime: number = 72 // hours (API input - will be converted for internal calculations)\n  ): TrajectoryResult {\n    // Input validation at API boundary\n    if (!launchDate || isNaN(launchDate.getTime())) {\n      throw new Error('Invalid launch date provided');\n    }\n    \n    // Validate flight time using unit converter\n    UnitConverter.validateMissionTime(flightTime);\n    \n    // Validate transfer type\n    const validTypes = ['hohmann', 'lambert', 'bi_elliptic'];\n    if (!validTypes.includes(transferType)) {\n      throw new Error(`Invalid transfer type: ${transferType}. Must be one of: ${validTypes.join(', ')}`);\n    }\n    // Initial and final orbit radii\n    const r_earth = CONSTANTS.EARTH_RADIUS + CONSTANTS.EARTH_LOW_ORBIT;\n    const r_moon = CONSTANTS.MOON_RADIUS + CONSTANTS.MOON_ORBIT_ALT;\n    \n    let totalDeltaV = 0;\n    let hohmannResult: HohmannResult | undefined;\n    let lambertResult: LambertResult | undefined;\n    let trajectoryPoints: Vector3D[] = [];\n    let orbitalElements: OrbitalElements[] = [];\n    \n    if (transferType === 'hohmann') {\n      // Calculate complete Earth-Moon patched conic transfer\n      const patchedConicTransfer = HohmannTransfer.calculateEarthMoonTransfer();\n      \n      // Use the earth escape portion as the primary Hohmann result for compatibility\n      hohmannResult = patchedConicTransfer.earthEscape;\n      \n      // Total delta-V includes Earth escape and lunar capture\n      totalDeltaV = patchedConicTransfer.totalDeltaV;\n      flightTime = patchedConicTransfer.totalTime;\n      \n      // Generate trajectory points for complete Earth-Moon transfer\n      trajectoryPoints = generatePatchedConicTrajectoryPoints(\n        r_earth, \n        CONSTANTS.EARTH_MOON_DISTANCE, \n        patchedConicTransfer.lunarSOI, \n        100\n      );\n      \n      // Include both Earth escape and lunar capture orbital elements\n      orbitalElements = [\n        patchedConicTransfer.earthEscape.transferOrbit,\n        patchedConicTransfer.lunarCapture.transferOrbit\n      ];\n      \n    } else if (transferType === 'lambert') {\n      // Calculate Lambert solution\n      const r1 = new Vector3D(r_earth, 0, 0); // Earth departure position\n      const r2 = new Vector3D(CONSTANTS.EARTH_MOON_DISTANCE, 0, 0); // Moon arrival position\n      \n      // Convert flight time from hours to seconds for internal calculations\n      const flightTimeSeconds = UnitConverter.hoursToSeconds(flightTime);\n      lambertResult = LambertSolver.solve(r1, r2, flightTimeSeconds, CONSTANTS.MU_EARTH);\n      \n      // Calculate delta-V requirements\n      const v_earth_circular = Math.sqrt(CONSTANTS.MU_EARTH / r_earth);\n      const deltaV_departure = lambertResult.velocityDeparture.magnitude() - v_earth_circular;\n      \n      const v_moon_circular = Math.sqrt(CONSTANTS.MU_MOON / r_moon);\n      const deltaV_arrival = lambertResult.velocityArrival.magnitude() - v_moon_circular;\n      \n      totalDeltaV = Math.abs(deltaV_departure) + Math.abs(deltaV_arrival);\n      \n      // Generate Lambert trajectory points\n      trajectoryPoints = generateLambertTrajectoryPoints(r1, r2, lambertResult, 100);\n    }\n    \n    // Calculate fuel requirements\n    const fuelOptimization = FuelOptimizer.calculate(totalDeltaV);\n    \n    // Risk assessment\n    const riskFactors = assessTrajectoryRisks(transferType, totalDeltaV, flightTime);\n    \n    // Calculate efficiency (based on theoretical minimum energy transfer)\n    const efficiency = calculateEfficiency(totalDeltaV, r_earth, CONSTANTS.EARTH_MOON_DISTANCE);\n    \n    return {\n      totalDeltaV: Math.round(totalDeltaV * 1000) / 1000, // Round to 3 decimal places\n      flightTime: Math.round(flightTime * 10) / 10,\n      fuelMass: Math.round(fuelOptimization.propellantMass),\n      efficiency: Math.round(efficiency * 10) / 10,\n      trajectoryPoints,\n      orbitalElements,\n      riskFactors,\n      calculations: {\n        hohmannTransfer: hohmannResult,\n        lambertSolution: lambertResult,\n        fuelOptimization\n      }\n    };\n  }\n  \n  /**\n   * Generate trajectory data for database storage\n   */\n  static generateTrajectoryRecord(\n    missionId: string,\n    name: string,\n    type: 'hohmann' | 'lambert' | 'bi_elliptic' | 'custom',\n    launchWindow: Date,\n    result: TrajectoryResult\n  ): Omit<InsertTrajectory, 'id' | 'createdAt'> {\n    return {\n      missionId,\n      decisionId: null, // Will be linked when AI makes decision\n      name,\n      type,\n      launchWindow,\n      totalDeltaV: result.totalDeltaV,\n      flightTime: result.flightTime,\n      fuelMass: result.fuelMass,\n      efficiency: result.efficiency,\n      trajectoryPoints: result.trajectoryPoints,\n      orbitalElements: result.orbitalElements,\n      riskFactors: result.riskFactors,\n      calculations: result.calculations,\n      isActive: false\n    };\n  }\n}\n\n// Helper functions\nfunction generateHohmannTrajectoryPoints(r1: number, r2: number, numPoints: number): Vector3D[] {\n  const points: Vector3D[] = [];\n  const a = (r1 + r2) / 2;\n  const e = Math.abs(r2 - r1) / (r1 + r2);\n  \n  for (let i = 0; i <= numPoints; i++) {\n    const theta = (Math.PI * i) / numPoints; // True anomaly from 0 to π\n    const r = a * (1 - e * e) / (1 + e * Math.cos(theta));\n    \n    points.push(new Vector3D(\n      r * Math.cos(theta),\n      r * Math.sin(theta),\n      0\n    ));\n  }\n  \n  return points;\n}\n\nfunction generatePatchedConicTrajectoryPoints(\n  r_earth: number, \n  r_moon: number, \n  lunarSOI: number, \n  numPoints: number\n): Vector3D[] {\n  const points: Vector3D[] = [];\n  const totalDistance = r_moon;\n  const soiTransition = r_moon - lunarSOI;\n  \n  // Divide points between Earth escape phase and lunar capture phase\n  const earthPhasePoints = Math.floor(numPoints * 0.8); // 80% of trajectory in Earth SOI\n  const lunarPhasePoints = numPoints - earthPhasePoints;\n  \n  // Phase 1: Earth escape trajectory (elliptical from r_earth to SOI boundary)\n  const a_earth = (r_earth + soiTransition) / 2;\n  const e_earth = Math.abs(soiTransition - r_earth) / (r_earth + soiTransition);\n  \n  for (let i = 0; i <= earthPhasePoints; i++) {\n    const theta = (Math.PI * i) / earthPhasePoints;\n    const r = a_earth * (1 - e_earth * e_earth) / (1 + e_earth * Math.cos(theta));\n    \n    points.push(new Vector3D(\n      r * Math.cos(theta),\n      r * Math.sin(theta),\n      0\n    ));\n  }\n  \n  // Phase 2: Lunar capture trajectory (hyperbolic approach and circularization)\n  const r_moon_parking = CONSTANTS.MOON_RADIUS + CONSTANTS.MOON_ORBIT_ALT;\n  \n  for (let i = 1; i <= lunarPhasePoints; i++) {\n    const t = i / lunarPhasePoints;\n    // Simple interpolation from SOI boundary to lunar parking orbit\n    const r = soiTransition + t * (r_moon - soiTransition);\n    \n    // Add some curvature to represent the hyperbolic approach\n    const curvature = Math.sin(t * Math.PI / 2) * lunarSOI * 0.1;\n    \n    points.push(new Vector3D(\n      r,\n      curvature,\n      0\n    ));\n  }\n  \n  return points;\n}\n\nfunction generateLambertTrajectoryPoints(\n  r1: Vector3D, \n  r2: Vector3D, \n  solution: LambertResult, \n  numPoints: number\n): Vector3D[] {\n  const points: Vector3D[] = [];\n  \n  // Simple linear interpolation for now (real implementation would integrate orbits)\n  for (let i = 0; i <= numPoints; i++) {\n    const t = i / numPoints;\n    const point = Vector3D.add(\n      Vector3D.multiply(r1, 1 - t),\n      Vector3D.multiply(r2, t)\n    );\n    points.push(point);\n  }\n  \n  return points;\n}\n\nfunction assessTrajectoryRisks(\n  type: string, \n  deltaV: number, \n  flightTime: number\n): string[] {\n  const risks: string[] = [];\n  \n  if (deltaV > 4.0) {\n    risks.push(\"High delta-V requirement increases fuel load and complexity\");\n  }\n  \n  if (flightTime > 120) {\n    risks.push(\"Extended flight time increases exposure to space weather\");\n  }\n  \n  if (type === 'lambert') {\n    risks.push(\"Lambert solution may require precise timing and navigation\");\n  }\n  \n  // Add space weather risks (would integrate with space weather data)\n  risks.push(\"Monitor solar activity during launch window\");\n  risks.push(\"Debris avoidance maneuvers may be required\");\n  \n  return risks;\n}\n\nfunction calculateEfficiency(deltaV: number, r1: number, r2: number): number {\n  // Theoretical minimum delta-V for Hohmann transfer\n  const mu = CONSTANTS.MU_EARTH;\n  const v1_circular = Math.sqrt(mu / r1);\n  const v2_circular = Math.sqrt(mu / r2);\n  const a_transfer = (r1 + r2) / 2;\n  \n  const v1_transfer = Math.sqrt(mu * (2 / r1 - 1 / a_transfer));\n  const v2_transfer = Math.sqrt(mu * (2 / r2 - 1 / a_transfer));\n  \n  const theoretical_min = Math.abs(v1_transfer - v1_circular) + Math.abs(v2_circular - v2_transfer);\n  \n  return Math.max(0, Math.min(100, (theoretical_min / deltaV) * 100));\n}","size_bytes":56656},"OdinOptimal/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2277},"OdinOptimal/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, real, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table (keeping existing structure)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Missions table - core spacecraft missions tracking\nexport const missions = pgTable(\"missions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  missionId: text(\"mission_id\").notNull().unique(), // e.g., \"ODIN-001\"\n  status: text(\"status\").notNull().default(\"planning\"), // planning, active, completed, cancelled\n  launchDate: timestamp(\"launch_date\", { withTimezone: true }),\n  arrivalDate: timestamp(\"arrival_date\", { withTimezone: true }),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`NOW()`),\n  trajectoryData: jsonb(\"trajectory_data\"), // Store trajectory calculations\n  threatEvents: jsonb(\"threat_events\"), // Associated threat events\n  currentProgress: real(\"current_progress\").default(0), // Mission progress percentage\n  threatLevel: text(\"threat_level\").default(\"low\"), // low, medium, high, critical\n});\n\n// Space Weather Data table - historical solar activity and space conditions\nexport const spaceWeather = pgTable(\"space_weather\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  timestamp: timestamp(\"timestamp\", { withTimezone: true }).notNull(),\n  solarFlux: real(\"solar_flux\"), // Solar flux measurements\n  geomagneticIndex: real(\"geomagnetic_index\"), // Kp/Ap index\n  solarWindSpeed: real(\"solar_wind_speed\"), // km/s\n  solarWindDensity: real(\"solar_wind_density\"), // particles/cm³\n  solarEvents: jsonb(\"solar_events\"), // Solar flares, CMEs, etc.\n  radiationLevel: real(\"radiation_level\"), // Radiation measurements\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`NOW()`),\n});\n\n// Threat Events table - detected threats to missions\nexport const threatEvents = pgTable(\"threat_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  missionId: varchar(\"mission_id\").references(() => missions.id, { onDelete: \"cascade\" }),\n  threatId: text(\"threat_id\").notNull().unique(), // e.g., \"SOL-001\", \"DEB-002\"\n  type: text(\"type\").notNull(), // solar_flare, space_debris, radiation_exposure, communication_blackout\n  severity: text(\"severity\").notNull(), // low, medium, high, critical\n  probability: real(\"probability\").notNull(), // 0-100 percentage\n  timeToEvent: text(\"time_to_event\"), // Human readable time estimate\n  impact: text(\"impact\").notNull(), // Description of potential impact\n  recommendation: text(\"recommendation\").notNull(), // AI recommendation\n  status: text(\"status\").default(\"active\"), // active, mitigated, resolved, ignored\n  detectedAt: timestamp(\"detected_at\", { withTimezone: true }).default(sql`NOW()`),\n  resolvedAt: timestamp(\"resolved_at\", { withTimezone: true }),\n  metadata: jsonb(\"metadata\"), // Additional threat-specific data\n});\n\n// AI Decisions table - logging AI decision-making process\nexport const aiDecisions = pgTable(\"ai_decisions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  decisionId: text(\"decision_id\").notNull().unique(), // e.g., \"DEC-001\"\n  missionId: varchar(\"mission_id\").references(() => missions.id, { onDelete: \"cascade\" }),\n  threatEventId: varchar(\"threat_event_id\").references(() => threatEvents.id),\n  timestamp: timestamp(\"timestamp\", { withTimezone: true }).default(sql`NOW()`),\n  threatDetected: text(\"threat_detected\").notNull(),\n  originalTrajectory: text(\"original_trajectory\").notNull(),\n  selectedTrajectory: text(\"selected_trajectory\").notNull(),\n  reasoning: text(\"reasoning\").notNull(), // AI's natural language explanation\n  tradeOffs: jsonb(\"trade_offs\").notNull(), // Fuel, time, safety, etc. impacts\n  alternatives: jsonb(\"alternatives\"), // Other trajectory options considered\n  confidence: real(\"confidence\").notNull(), // AI confidence score 0-100\n  status: text(\"status\").default(\"pending\"), // pending, implemented, active, completed, rejected\n  implementedAt: timestamp(\"implemented_at\", { withTimezone: true }),\n  feedback: text(\"feedback\"), // Human feedback on the decision\n  outcome: text(\"outcome\"), // Actual results after implementation\n});\n\n// Trajectories table - calculated trajectory data and parameters\nexport const trajectories = pgTable(\"trajectories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  missionId: varchar(\"mission_id\").references(() => missions.id, { onDelete: \"cascade\" }),\n  decisionId: varchar(\"decision_id\").references(() => aiDecisions.id),\n  name: text(\"name\").notNull(), // e.g., \"Direct Hohmann Transfer\", \"L1 Lagrange Route\"\n  type: text(\"type\").notNull(), // hohmann, bi_elliptic, lambert, custom\n  launchWindow: timestamp(\"launch_window\", { withTimezone: true }),\n  totalDeltaV: real(\"total_delta_v\"), // Total ΔV in km/s\n  flightTime: real(\"flight_time\"), // Flight time in hours\n  fuelMass: real(\"fuel_mass\"), // Required fuel mass in kg\n  efficiency: real(\"efficiency\"), // Fuel efficiency percentage\n  trajectoryPoints: jsonb(\"trajectory_points\"), // Array of coordinate points\n  orbitalElements: jsonb(\"orbital_elements\"), // Orbital mechanics data\n  riskFactors: jsonb(\"risk_factors\"), // Associated risks and mitigations\n  calculations: jsonb(\"calculations\"), // Detailed calculation results\n  isActive: boolean(\"is_active\").default(false),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`NOW()`),\n});\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertMissionSchema = createInsertSchema(missions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSpaceWeatherSchema = createInsertSchema(spaceWeather).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertThreatEventSchema = createInsertSchema(threatEvents).omit({\n  id: true,\n  detectedAt: true,\n});\n\nexport const insertAiDecisionSchema = createInsertSchema(aiDecisions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertTrajectorySchema = createInsertSchema(trajectories).omit({\n  id: true,\n  createdAt: true,\n});\n\n// TypeScript types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertMission = z.infer<typeof insertMissionSchema>;\nexport type Mission = typeof missions.$inferSelect;\n\nexport type InsertSpaceWeather = z.infer<typeof insertSpaceWeatherSchema>;\nexport type SpaceWeather = typeof spaceWeather.$inferSelect;\n\nexport type InsertThreatEvent = z.infer<typeof insertThreatEventSchema>;\nexport type ThreatEvent = typeof threatEvents.$inferSelect;\n\nexport type InsertAiDecision = z.infer<typeof insertAiDecisionSchema>;\nexport type AiDecision = typeof aiDecisions.$inferSelect;\n\nexport type InsertTrajectory = z.infer<typeof insertTrajectorySchema>;\nexport type Trajectory = typeof trajectories.$inferSelect;\n","size_bytes":7313},"OdinOptimal/client/src/App.tsx":{"content":"import { useState } from \"react\"\nimport { Switch, Route } from \"wouter\"\nimport { queryClient } from \"./lib/queryClient\"\nimport { QueryClientProvider } from \"@tanstack/react-query\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { TooltipProvider } from \"@/components/ui/tooltip\"\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\n\nimport { ThemeProvider } from \"@/components/ThemeProvider\"\nimport ThemeToggle from \"@/components/ThemeToggle\"\nimport LanguageSwitcher from \"@/components/LanguageSwitcher\"\nimport AppSidebar from \"@/components/AppSidebar\"\nimport HeroSection from \"@/components/HeroSection\"\nimport MissionDashboard from \"@/components/MissionDashboard\"\nimport TrajectoryViewer from \"@/components/TrajectoryViewer\"\nimport ThreatMonitor from \"@/components/ThreatMonitor\"\nimport DecisionLog from \"@/components/DecisionLog\"\n\nimport NotFound from \"@/pages/not-found\"\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/trajectory\" component={TrajectoryPage} />\n      <Route path=\"/threats\" component={ThreatsPage} />\n      <Route path=\"/decisions\" component={DecisionsPage} />\n      <Route component={NotFound} />\n    </Switch>\n  )\n}\n\nfunction HomePage() {\n  return <HeroSection />\n}\n\nfunction DashboardPage() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Mission Control Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Monitor active missions, system status, and operational metrics\n        </p>\n      </div>\n      <MissionDashboard />\n    </div>\n  )\n}\n\nfunction TrajectoryPage() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Trajectory Planning</h1>\n        <p className=\"text-muted-foreground\">\n          Advanced 3D trajectory visualization and orbital mechanics calculations\n        </p>\n      </div>\n      <TrajectoryViewer />\n    </div>\n  )\n}\n\nfunction ThreatsPage() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Threat Detection System</h1>\n        <p className=\"text-muted-foreground\">\n          Real-time monitoring of solar activity, space debris, and radiation exposure\n        </p>\n      </div>\n      <ThreatMonitor />\n    </div>\n  )\n}\n\nfunction DecisionsPage() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground\">AI Decision Analysis</h1>\n        <p className=\"text-muted-foreground\">\n          Review AI-generated trajectory decisions and optimization recommendations\n        </p>\n      </div>\n      <DecisionLog />\n    </div>\n  )\n}\n\nexport default function App() {\n  const [showLanding, setShowLanding] = useState(true)\n\n  // ODIN system sidebar width configuration\n  const sidebarStyle = {\n    \"--sidebar-width\": \"18rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  }\n\n  if (showLanding) {\n    return (\n      <ThemeProvider>\n        <QueryClientProvider client={queryClient}>\n          <TooltipProvider>\n            <div className=\"min-h-screen bg-background\">\n              {/* Landing Header */}\n              <header className=\"fixed top-0 right-0 z-50 p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <LanguageSwitcher />\n                  <ThemeToggle />\n                </div>\n              </header>\n              \n              {/* Hero Section */}\n              <HeroSection />\n              \n              {/* Enter System Button */}\n              <div className=\"fixed bottom-8 left-1/2 transform -translate-x-1/2 z-50\">\n                <button\n                  onClick={() => {\n                    setShowLanding(false)\n                    console.log('Entering ODIN mission control system')\n                  }}\n                  className=\"bg-mission-orange hover:bg-mission-orange/90 text-white px-8 py-4 rounded-lg font-semibold shadow-lg hover:shadow-xl transition-all active-elevate-2\"\n                  data-testid=\"button-enter-system\"\n                >\n                  Enter Mission Control\n                </button>\n              </div>\n            </div>\n            <Toaster />\n          </TooltipProvider>\n        </QueryClientProvider>\n      </ThemeProvider>\n    )\n  }\n\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n            <div className=\"flex h-screen w-full bg-background\">\n              <AppSidebar />\n              \n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                {/* Header */}\n                <header className=\"flex items-center justify-between p-4 border-b border-border bg-background/95 backdrop-blur-sm\">\n                  <div className=\"flex items-center gap-4\">\n                    <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                    <div>\n                      <h2 className=\"text-xl font-bold text-space-blue\">ODIN</h2>\n                      <p className=\"text-sm text-muted-foreground\">Mission Control System</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <LanguageSwitcher />\n                    <ThemeToggle />\n                  </div>\n                </header>\n\n                {/* Main Content */}\n                <main className=\"flex-1 overflow-auto bg-background\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  )\n}","size_bytes":5889},"OdinOptimal/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 200 6% 95%;\n  --foreground: 220 15% 15%;\n  --border: 200 8% 85%;\n  --card: 200 6% 92%;\n  --card-foreground: 220 15% 15%;\n  --card-border: 200 8% 82%;\n  --sidebar: 200 6% 88%;\n  --sidebar-foreground: 220 15% 15%;\n  --sidebar-border: 200 8% 78%;\n  --sidebar-primary: 220 85% 15%;\n  --sidebar-primary-foreground: 200 15% 92%;\n  --sidebar-accent: 200 10% 78%;\n  --sidebar-accent-foreground: 220 20% 25%;\n  --sidebar-ring: 220 85% 15%;\n  --popover: 200 8% 85%;\n  --popover-foreground: 220 15% 15%;\n  --popover-border: 200 10% 75%;\n  --primary: 220 85% 15%;\n  --primary-foreground: 200 15% 92%;\n  --secondary: 200 10% 78%;\n  --secondary-foreground: 220 20% 25%;\n  --muted: 200 10% 82%;\n  --muted-foreground: 220 15% 35%;\n  --accent: 200 12% 80%;\n  --accent-foreground: 220 20% 25%;\n  --destructive: 0 85% 55%;\n  --destructive-foreground: 0 15% 95%;\n  --input: 200 15% 70%;\n  --ring: 220 85% 15%;\n  --chart-1: 220 85% 15%;\n  --chart-2: 25 100% 55%;\n  --chart-3: 120 60% 45%;\n  --chart-4: 45 100% 60%;\n  --chart-5: 210 10% 50%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 85% 15% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 85% 15% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 85% 15% / 0.00), 0px 1px 2px -1px hsl(220 85% 15% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 85% 15% / 0.00), 0px 1px 2px -1px hsl(220 85% 15% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 85% 15% / 0.00), 0px 2px 4px -1px hsl(220 85% 15% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 85% 15% / 0.00), 0px 4px 6px -1px hsl(220 85% 15% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 85% 15% / 0.00), 0px 8px 10px -1px hsl(220 85% 15% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 85% 15% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 8%;\n  --foreground: 200 15% 92%;\n  --border: 220 20% 15%;\n  --card: 220 15% 12%;\n  --card-foreground: 200 15% 92%;\n  --card-border: 220 18% 18%;\n  --sidebar: 220 15% 10%;\n  --sidebar-foreground: 200 15% 92%;\n  --sidebar-border: 220 18% 16%;\n  --sidebar-primary: 220 85% 15%;\n  --sidebar-primary-foreground: 200 15% 92%;\n  --sidebar-accent: 220 12% 18%;\n  --sidebar-accent-foreground: 200 12% 85%;\n  --sidebar-ring: 220 85% 15%;\n  --popover: 220 15% 16%;\n  --popover-foreground: 200 15% 92%;\n  --popover-border: 220 18% 22%;\n  --primary: 220 85% 15%;\n  --primary-foreground: 200 15% 92%;\n  --secondary: 220 12% 20%;\n  --secondary-foreground: 200 12% 85%;\n  --muted: 220 10% 18%;\n  --muted-foreground: 200 10% 75%;\n  --accent: 220 12% 16%;\n  --accent-foreground: 200 12% 85%;\n  --destructive: 0 85% 55%;\n  --destructive-foreground: 0 15% 95%;\n  --input: 220 15% 25%;\n  --ring: 220 85% 15%;\n  --chart-1: 220 85% 55%;\n  --chart-2: 25 100% 65%;\n  --chart-3: 120 60% 60%;\n  --chart-4: 45 100% 70%;\n  --chart-5: 210 10% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 1px 2px -1px hsl(220 25% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 1px 2px -1px hsl(220 25% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 2px 4px -1px hsl(220 25% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 4px 6px -1px hsl(220 25% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 8px 10px -1px hsl(220 25% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9800},"OdinOptimal/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"OdinOptimal/python_backend/api/__init__.py":{"content":"# API package initialization","size_bytes":28},"OdinOptimal/python_backend/api/decisions.py":{"content":"\"\"\"\nAI Decision Engine API Endpoints\n\"\"\"\n\nfrom flask import Blueprint, request, jsonify\nfrom datetime import datetime\nfrom services.ai_decision_engine import AIDecisionEngine\nfrom models.ai_decision import AIDecision, db\n\ndecisions_bp = Blueprint('decisions', __name__)\n\n@decisions_bp.route('/analyze', methods=['POST'])\ndef analyze_decision():\n    \"\"\"Analyze situation and generate AI decision\"\"\"\n    try:\n        data = request.get_json()\n        \n        # Extract decision context\n        context = {\n            'mission_id': data.get('mission_id'),\n            'current_trajectory': data.get('current_trajectory'),\n            'threat_data': data.get('threats', {}),\n            'mission_constraints': data.get('constraints', {}),\n            'optimization_criteria': data.get('criteria', {\n                'fuel_efficiency': 0.4,\n                'travel_time': 0.3,\n                'safety': 0.3\n            })\n        }\n        \n        ai_engine = AIDecisionEngine()\n        decision_result = ai_engine.analyze_and_decide(context)\n        \n        # Log the decision\n        ai_decision = AIDecision(\n            mission_id=context['mission_id'],\n            decision_type='trajectory_optimization',\n            context_data=context,\n            decision_data=decision_result,\n            reasoning=decision_result.get('reasoning', ''),\n            confidence_score=decision_result.get('confidence', 0.0),\n            timestamp=datetime.utcnow()\n        )\n        \n        db.session.add(ai_decision)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'decision': decision_result,\n            'decision_id': ai_decision.id,\n            'alternatives': decision_result.get('alternatives', []),\n            'trade_offs': decision_result.get('trade_offs', {}),\n            'reasoning': decision_result.get('reasoning', ''),\n            'confidence': decision_result.get('confidence', 0.0)\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@decisions_bp.route('/history', methods=['GET'])\ndef get_decision_history():\n    \"\"\"Get AI decision history\"\"\"\n    try:\n        mission_id = request.args.get('mission_id')\n        limit = int(request.args.get('limit', 50))\n        \n        query = AIDecision.query\n        if mission_id:\n            query = query.filter_by(mission_id=mission_id)\n            \n        decisions = query.order_by(AIDecision.timestamp.desc()).limit(limit).all()\n        \n        return jsonify({\n            'success': True,\n            'decisions': [decision.to_dict() for decision in decisions],\n            'count': len(decisions)\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@decisions_bp.route('/replan', methods=['POST'])\ndef trigger_replanning():\n    \"\"\"Trigger autonomous replanning\"\"\"\n    try:\n        data = request.get_json()\n        \n        context = {\n            'mission_id': data.get('mission_id'),\n            'trigger_reason': data.get('reason', 'manual_trigger'),\n            'current_situation': data.get('situation', {}),\n            'emergency_level': data.get('emergency_level', 'low')  # low, medium, high, critical\n        }\n        \n        ai_engine = AIDecisionEngine()\n        replan_result = ai_engine.autonomous_replan(context)\n        \n        # Log replanning decision\n        ai_decision = AIDecision(\n            mission_id=context['mission_id'],\n            decision_type='autonomous_replan',\n            context_data=context,\n            decision_data=replan_result,\n            reasoning=replan_result.get('reasoning', ''),\n            confidence_score=replan_result.get('confidence', 0.0),\n            timestamp=datetime.utcnow()\n        )\n        \n        db.session.add(ai_decision)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'replan_result': replan_result,\n            'new_trajectory': replan_result.get('new_trajectory'),\n            'estimated_impact': replan_result.get('impact_analysis', {}),\n            'implementation_steps': replan_result.get('implementation_steps', []),\n            'approval_required': replan_result.get('requires_approval', False)\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@decisions_bp.route('/explain/<int:decision_id>', methods=['GET'])\ndef explain_decision(decision_id):\n    \"\"\"Get detailed explanation of a specific decision\"\"\"\n    try:\n        decision = AIDecision.query.get_or_404(decision_id)\n        \n        ai_engine = AIDecisionEngine()\n        explanation = ai_engine.generate_detailed_explanation(decision.to_dict())\n        \n        return jsonify({\n            'success': True,\n            'decision': decision.to_dict(),\n            'explanation': explanation,\n            'reasoning_tree': explanation.get('reasoning_tree', []),\n            'alternative_analysis': explanation.get('alternatives_considered', [])\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400","size_bytes":5350},"OdinOptimal/python_backend/api/missions.py":{"content":"\"\"\"\nMission Management API Endpoints\n\"\"\"\n\nfrom flask import Blueprint, request, jsonify\nfrom datetime import datetime\nfrom models.mission import Mission, db\n\nmissions_bp = Blueprint('missions', __name__)\n\n@missions_bp.route('/create', methods=['POST'])\ndef create_mission():\n    \"\"\"Create a new mission\"\"\"\n    try:\n        data = request.get_json()\n        \n        mission = Mission(\n            name=data.get('name'),\n            launch_date=datetime.fromisoformat(data.get('launch_date')),\n            arrival_date=datetime.fromisoformat(data.get('arrival_date')) if data.get('arrival_date') else None,\n            fuel_capacity=data.get('fuel_capacity', 1000.0),\n            crew_size=data.get('crew_size', 0),\n            trajectory_data=data.get('trajectory_data', {}),\n        )\n        \n        db.session.add(mission)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'mission': mission.to_dict(),\n            'message': 'Mission created successfully'\n        }), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@missions_bp.route('/<int:mission_id>/status', methods=['GET'])\ndef get_mission_status(mission_id):\n    \"\"\"Get mission status\"\"\"\n    try:\n        mission = Mission.query.get_or_404(mission_id)\n        \n        # Calculate mission progress\n        now = datetime.utcnow()\n        if mission.launch_date and mission.arrival_date:\n            total_duration = (mission.arrival_date - mission.launch_date).total_seconds()\n            elapsed = (now - mission.launch_date).total_seconds()\n            progress = min(max(elapsed / total_duration * 100, 0), 100) if total_duration > 0 else 0\n        else:\n            progress = 0\n            \n        return jsonify({\n            'success': True,\n            'mission': mission.to_dict(),\n            'progress': progress,\n            'fuel_efficiency': ((mission.fuel_capacity - mission.fuel_used) / mission.fuel_capacity * 100) if mission.fuel_capacity > 0 else 0\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@missions_bp.route('/', methods=['GET'])\ndef list_missions():\n    \"\"\"List all missions\"\"\"\n    try:\n        missions = Mission.query.order_by(Mission.created_at.desc()).all()\n        return jsonify({\n            'success': True,\n            'missions': [mission.to_dict() for mission in missions],\n            'count': len(missions)\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@missions_bp.route('/<int:mission_id>', methods=['PUT'])\ndef update_mission(mission_id):\n    \"\"\"Update mission details\"\"\"\n    try:\n        mission = Mission.query.get_or_404(mission_id)\n        data = request.get_json()\n        \n        # Update fields if provided\n        if 'status' in data:\n            mission.status = data['status']\n        if 'fuel_used' in data:\n            mission.fuel_used = data['fuel_used']\n        if 'trajectory_data' in data:\n            mission.trajectory_data = data['trajectory_data']\n        if 'threat_events' in data:\n            mission.threat_events = data['threat_events']\n        if 'decisions_log' in data:\n            mission.decisions_log = data['decisions_log']\n            \n        mission.updated_at = datetime.utcnow()\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'mission': mission.to_dict(),\n            'message': 'Mission updated successfully'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400","size_bytes":3862},"OdinOptimal/python_backend/api/threats.py":{"content":"\"\"\"\nThreat Detection & Risk Assessment API Endpoints\n\"\"\"\n\nfrom flask import Blueprint, request, jsonify\nfrom datetime import datetime, timedelta\nfrom services.threat_monitor import ThreatMonitor\nfrom services.space_weather import SpaceWeatherService\n\nthreats_bp = Blueprint('threats', __name__)\n\n@threats_bp.route('/analyze', methods=['POST'])\ndef analyze_threats():\n    \"\"\"Analyze current and predicted threats\"\"\"\n    try:\n        data = request.get_json()\n        \n        # Get mission trajectory and timeframe\n        trajectory = data.get('trajectory')\n        mission_id = data.get('mission_id')\n        start_time = datetime.fromisoformat(data.get('start_time', datetime.utcnow().isoformat()))\n        end_time = datetime.fromisoformat(data.get('end_time', (datetime.utcnow() + timedelta(days=3)).isoformat()))\n        \n        threat_monitor = ThreatMonitor()\n        space_weather = SpaceWeatherService()\n        \n        # Analyze different threat types\n        threats = {\n            'solar_activity': space_weather.get_solar_activity_forecast(start_time, end_time),\n            'space_debris': threat_monitor.analyze_debris_risk(trajectory, start_time, end_time),\n            'radiation_exposure': threat_monitor.calculate_radiation_exposure(trajectory),\n            'communication_blackouts': threat_monitor.predict_comm_blackouts(trajectory, start_time, end_time)\n        }\n        \n        # Calculate overall risk score\n        risk_assessment = threat_monitor.calculate_overall_risk(threats)\n        \n        return jsonify({\n            'success': True,\n            'threats': threats,\n            'risk_assessment': risk_assessment,\n            'recommendations': threat_monitor.generate_recommendations(threats),\n            'critical_periods': threat_monitor.identify_critical_periods(threats, start_time, end_time)\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@threats_bp.route('/solar-activity', methods=['GET'])\ndef get_solar_activity():\n    \"\"\"Get current solar activity data\"\"\"\n    try:\n        space_weather = SpaceWeatherService()\n        \n        # Get current solar data\n        solar_data = space_weather.get_current_solar_activity()\n        \n        return jsonify({\n            'success': True,\n            'solar_flux': solar_data.get('solar_flux'),\n            'geomagnetic_index': solar_data.get('geomagnetic_index'),\n            'solar_events': solar_data.get('solar_events', []),\n            'last_updated': solar_data.get('timestamp'),\n            'forecast': space_weather.get_24h_forecast()\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@threats_bp.route('/debris-tracking', methods=['POST'])\ndef track_debris():\n    \"\"\"Track space debris along trajectory\"\"\"\n    try:\n        data = request.get_json()\n        trajectory = data.get('trajectory')\n        time_window = data.get('time_window', 24)  # hours\n        \n        threat_monitor = ThreatMonitor()\n        debris_analysis = threat_monitor.track_orbital_debris(trajectory, time_window)\n        \n        return jsonify({\n            'success': True,\n            'debris_objects': debris_analysis.get('objects', []),\n            'collision_probabilities': debris_analysis.get('collision_probs', []),\n            'avoidance_maneuvers': debris_analysis.get('avoidance_options', []),\n            'highest_risk_period': debris_analysis.get('peak_risk_time')\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@threats_bp.route('/radiation-exposure', methods=['POST'])\ndef calculate_radiation():\n    \"\"\"Calculate radiation exposure for given trajectory\"\"\"\n    try:\n        data = request.get_json()\n        trajectory = data.get('trajectory')\n        crew_size = data.get('crew_size', 0)\n        mission_duration = data.get('duration', 3.0)  # days\n        \n        threat_monitor = ThreatMonitor()\n        radiation_analysis = threat_monitor.calculate_detailed_radiation_exposure(\n            trajectory, crew_size, mission_duration\n        )\n        \n        return jsonify({\n            'success': True,\n            'total_dose': radiation_analysis.get('total_dose'),\n            'dose_rate': radiation_analysis.get('dose_rate'),\n            'critical_zones': radiation_analysis.get('high_radiation_zones', []),\n            'protection_recommendations': radiation_analysis.get('protection_measures', []),\n            'crew_safety_status': radiation_analysis.get('crew_safety', 'safe')\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400","size_bytes":4823},"OdinOptimal/python_backend/api/trajectory.py":{"content":"\"\"\"\nTrajectory Planning API Endpoints\n\"\"\"\n\nfrom flask import Blueprint, request, jsonify\nimport numpy as np\nfrom services.trajectory_engine import TrajectoryEngine\nfrom services.lambert_solver import LambertSolver\n\ntrajectory_bp = Blueprint('trajectory', __name__)\n\n@trajectory_bp.route('/calculate', methods=['POST'])\ndef calculate_trajectory():\n    \"\"\"Calculate optimal trajectory between two points\"\"\"\n    try:\n        data = request.get_json()\n        \n        # Extract parameters\n        start_position = data.get('start_position')  # [x, y, z] in km\n        end_position = data.get('end_position')      # [x, y, z] in km\n        transfer_time = data.get('transfer_time', 3.0 * 24 * 3600)  # seconds (default 3 days)\n        method = data.get('method', 'hohmann')  # hohmann, bi_elliptic, lambert\n        \n        trajectory_engine = TrajectoryEngine()\n        \n        if method == 'lambert':\n            # Use Lambert's problem solver\n            lambert = LambertSolver()\n            result = lambert.solve(start_position, end_position, transfer_time)\n        elif method == 'hohmann':\n            # Hohmann transfer optimization\n            result = trajectory_engine.calculate_hohmann_transfer(start_position, end_position)\n        elif method == 'bi_elliptic':\n            # Bi-elliptic transfer\n            result = trajectory_engine.calculate_bi_elliptic_transfer(start_position, end_position)\n        else:\n            return jsonify({\n                'success': False,\n                'error': f'Unknown trajectory method: {method}'\n            }), 400\n            \n        return jsonify({\n            'success': True,\n            'trajectory': result,\n            'method': method,\n            'delta_v_total': result.get('delta_v_total', 0),\n            'transfer_time': result.get('transfer_time', transfer_time),\n            'fuel_efficiency': result.get('fuel_efficiency', 0)\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@trajectory_bp.route('/optimize', methods=['POST'])\ndef optimize_trajectory():\n    \"\"\"Multi-objective trajectory optimization\"\"\"\n    try:\n        data = request.get_json()\n        \n        # Optimization criteria weights\n        weights = {\n            'fuel_efficiency': data.get('fuel_weight', 0.4),\n            'travel_time': data.get('time_weight', 0.3),\n            'safety_score': data.get('safety_weight', 0.3)\n        }\n        \n        trajectory_engine = TrajectoryEngine()\n        result = trajectory_engine.multi_objective_optimization(\n            start_pos=data.get('start_position'),\n            end_pos=data.get('end_position'),\n            constraints=data.get('constraints', {}),\n            weights=weights\n        )\n        \n        return jsonify({\n            'success': True,\n            'optimal_trajectory': result,\n            'alternatives': result.get('alternatives', []),\n            'trade_offs': result.get('trade_offs', {})\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400\n\n@trajectory_bp.route('/validate', methods=['POST'])\ndef validate_trajectory():\n    \"\"\"Validate trajectory for safety and feasibility\"\"\"\n    try:\n        data = request.get_json()\n        trajectory_data = data.get('trajectory')\n        \n        trajectory_engine = TrajectoryEngine()\n        validation_result = trajectory_engine.validate_trajectory(trajectory_data)\n        \n        return jsonify({\n            'success': True,\n            'is_valid': validation_result['is_valid'],\n            'issues': validation_result.get('issues', []),\n            'recommendations': validation_result.get('recommendations', []),\n            'safety_score': validation_result.get('safety_score', 0)\n        })\n        \n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 400","size_bytes":3983},"OdinOptimal/python_backend/models/__init__.py":{"content":"\"\"\"\nODIN Database Models\n\"\"\"\n\nfrom .mission import Mission\nfrom .space_weather import SpaceWeather\nfrom .threat_event import ThreatEvent\nfrom .ai_decision import AIDecision\nfrom .trajectory import Trajectory\n\n__all__ = ['Mission', 'SpaceWeather', 'ThreatEvent', 'AIDecision', 'Trajectory']","size_bytes":289},"OdinOptimal/python_backend/models/ai_decision.py":{"content":"\"\"\"\nAI Decision Database Model\n\"\"\"\n\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.dialects.postgresql import JSON\n\ndb = SQLAlchemy()\n\nclass AIDecision(db.Model):\n    \"\"\"AI decision logging model\"\"\"\n    __tablename__ = 'ai_decisions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    mission_id = db.Column(db.Integer, db.ForeignKey('missions.id'))\n    decision_type = db.Column(db.String(100), nullable=False)\n    context_data = db.Column(JSON)  # Input context for decision\n    decision_data = db.Column(JSON)  # The actual decision made\n    reasoning = db.Column(db.Text)  # AI's reasoning explanation\n    confidence_score = db.Column(db.Float, default=0.0)  # 0.0 to 1.0\n    alternatives_considered = db.Column(JSON)  # Other options evaluated\n    trade_offs = db.Column(JSON)  # Trade-off analysis\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    implemented = db.Column(db.Boolean, default=False)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'mission_id': self.mission_id,\n            'decision_type': self.decision_type,\n            'context_data': self.context_data,\n            'decision_data': self.decision_data,\n            'reasoning': self.reasoning,\n            'confidence_score': self.confidence_score,\n            'alternatives_considered': self.alternatives_considered,\n            'trade_offs': self.trade_offs,\n            'timestamp': self.timestamp.isoformat() if self.timestamp else None,\n            'implemented': self.implemented\n        }","size_bytes":1571},"OdinOptimal/python_backend/models/mission.py":{"content":"\"\"\"\nMission Database Model\n\"\"\"\n\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.dialects.postgresql import JSON\n\ndb = SQLAlchemy()\n\nclass Mission(db.Model):\n    \"\"\"Mission tracking model\"\"\"\n    __tablename__ = 'missions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(255), nullable=False)\n    launch_date = db.Column(db.DateTime, nullable=False)\n    arrival_date = db.Column(db.DateTime, nullable=True)\n    status = db.Column(db.String(50), default='planning')  # planning, active, completed, aborted\n    trajectory_data = db.Column(JSON)\n    threat_events = db.Column(JSON)\n    decisions_log = db.Column(JSON)\n    fuel_capacity = db.Column(db.Float, default=1000.0)  # kg\n    fuel_used = db.Column(db.Float, default=0.0)  # kg\n    crew_size = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'launch_date': self.launch_date.isoformat() if self.launch_date else None,\n            'arrival_date': self.arrival_date.isoformat() if self.arrival_date else None,\n            'status': self.status,\n            'trajectory_data': self.trajectory_data,\n            'threat_events': self.threat_events,\n            'decisions_log': self.decisions_log,\n            'fuel_capacity': self.fuel_capacity,\n            'fuel_used': self.fuel_used,\n            'crew_size': self.crew_size,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }","size_bytes":1783},"OdinOptimal/python_backend/models/space_weather.py":{"content":"\"\"\"\nSpace Weather Database Model\n\"\"\"\n\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.dialects.postgresql import JSON\n\ndb = SQLAlchemy()\n\nclass SpaceWeather(db.Model):\n    \"\"\"Historical space weather data model\"\"\"\n    __tablename__ = 'space_weather'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.DateTime, nullable=False)\n    solar_flux = db.Column(db.Float)  # Solar flux index\n    geomagnetic_index = db.Column(db.Float)  # Kp index\n    solar_events = db.Column(JSON)  # Solar flares, CME events\n    radiation_level = db.Column(db.Float)  # Background radiation\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'timestamp': self.timestamp.isoformat() if self.timestamp else None,\n            'solar_flux': self.solar_flux,\n            'geomagnetic_index': self.geomagnetic_index,\n            'solar_events': self.solar_events,\n            'radiation_level': self.radiation_level,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }","size_bytes":1149},"OdinOptimal/python_backend/models/threat_event.py":{"content":"\"\"\"\nThreat Event Database Model\n\"\"\"\n\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.dialects.postgresql import JSON\n\ndb = SQLAlchemy()\n\nclass ThreatEvent(db.Model):\n    \"\"\"Detected threat events model\"\"\"\n    __tablename__ = 'threat_events'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    mission_id = db.Column(db.Integer, db.ForeignKey('missions.id'))\n    threat_type = db.Column(db.String(100), nullable=False)  # solar_flare, debris, radiation\n    severity = db.Column(db.String(20), default='low')  # low, medium, high, critical\n    probability = db.Column(db.Float, default=0.0)  # 0.0 to 1.0\n    impact_data = db.Column(JSON)\n    mitigation_options = db.Column(JSON)\n    detected_at = db.Column(db.DateTime, default=datetime.utcnow)\n    predicted_time = db.Column(db.DateTime)  # When the threat will occur\n    resolved = db.Column(db.Boolean, default=False)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'mission_id': self.mission_id,\n            'threat_type': self.threat_type,\n            'severity': self.severity,\n            'probability': self.probability,\n            'impact_data': self.impact_data,\n            'mitigation_options': self.mitigation_options,\n            'detected_at': self.detected_at.isoformat() if self.detected_at else None,\n            'predicted_time': self.predicted_time.isoformat() if self.predicted_time else None,\n            'resolved': self.resolved\n        }","size_bytes":1492},"OdinOptimal/python_backend/models/trajectory.py":{"content":"\"\"\"\nTrajectory Database Model\n\"\"\"\n\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.dialects.postgresql import JSON\n\ndb = SQLAlchemy()\n\nclass Trajectory(db.Model):\n    \"\"\"Calculated orbital trajectories model\"\"\"\n    __tablename__ = 'trajectories'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    mission_id = db.Column(db.Integer, db.ForeignKey('missions.id'))\n    trajectory_type = db.Column(db.String(50), nullable=False)  # hohmann, bi_elliptic, lambert\n    start_position = db.Column(JSON)  # [x, y, z] coordinates\n    end_position = db.Column(JSON)   # [x, y, z] coordinates\n    waypoints = db.Column(JSON)      # Array of trajectory points\n    delta_v_total = db.Column(db.Float)  # Total velocity change required\n    transfer_time = db.Column(db.Float)  # Time in seconds\n    fuel_efficiency = db.Column(db.Float)  # Efficiency score 0-100\n    safety_score = db.Column(db.Float)     # Safety rating 0-100\n    is_optimal = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'mission_id': self.mission_id,\n            'trajectory_type': self.trajectory_type,\n            'start_position': self.start_position,\n            'end_position': self.end_position,\n            'waypoints': self.waypoints,\n            'delta_v_total': self.delta_v_total,\n            'transfer_time': self.transfer_time,\n            'fuel_efficiency': self.fuel_efficiency,\n            'safety_score': self.safety_score,\n            'is_optimal': self.is_optimal,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }","size_bytes":1717},"OdinOptimal/python_backend/services/__init__.py":{"content":"# Services package initialization","size_bytes":33},"OdinOptimal/python_backend/services/ai_decision_engine.py":{"content":"\"\"\"\nODIN AI Decision Engine\nProvides autonomous decision-making capabilities for spacecraft trajectory planning\n\"\"\"\n\nimport json\nimport random\nfrom datetime import datetime\nfrom typing import Dict, List, Any\n\nclass AIDecisionEngine:\n    \"\"\"AI-powered decision engine for autonomous spacecraft operations\"\"\"\n    \n    def __init__(self):\n        self.decision_templates = {\n            'trajectory_optimization': {\n                'criteria': ['fuel_efficiency', 'travel_time', 'safety_score'],\n                'weights': {'fuel_efficiency': 0.4, 'travel_time': 0.3, 'safety_score': 0.3}\n            }\n        }\n    \n    def analyze_and_decide(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Analyze situation and generate AI decision\"\"\"\n        try:\n            # Simple decision logic for now\n            alternatives = [\n                {\n                    'name': 'Minimum Fuel Transfer',\n                    'type': 'hohmann',\n                    'fuel_efficiency': 95,\n                    'travel_time': 72,\n                    'safety_score': 85,\n                    'evaluation_score': 0.88\n                },\n                {\n                    'name': 'Fast Transfer', \n                    'type': 'bi_elliptic',\n                    'fuel_efficiency': 75,\n                    'travel_time': 48,\n                    'safety_score': 80,\n                    'evaluation_score': 0.76\n                }\n            ]\n            \n            best_alternative = max(alternatives, key=lambda x: x['evaluation_score'])\n            \n            return {\n                'decision': best_alternative,\n                'reasoning': f\"Selected {best_alternative['name']} based on optimal fuel efficiency and safety scores.\",\n                'confidence': 0.85,\n                'alternatives': alternatives,\n                'trade_offs': {\n                    'fuel_vs_time': 'Optimized for fuel efficiency over speed',\n                    'safety_factor': 'High safety margin maintained'\n                },\n                'decision_type': 'trajectory_optimization',\n                'timestamp': datetime.utcnow().isoformat()\n            }\n            \n        except Exception as e:\n            raise Exception(f\"AI decision analysis failed: {str(e)}\")\n    \n    def autonomous_replan(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Perform autonomous mission replanning\"\"\"\n        try:\n            emergency_level = context.get('emergency_level', 'low')\n            trigger_reason = context.get('trigger_reason', 'unknown')\n            \n            replan_result = {\n                'replan_type': 'trajectory_adjustment',\n                'confidence': 0.85,\n                'fuel_impact': 15,\n                'time_impact': 5\n            }\n            \n            reasoning = (f\"Autonomous replanning triggered by {trigger_reason}. \"\n                        f\"Selected {replan_result['replan_type']} to maintain mission safety.\")\n            \n            return {\n                'new_trajectory': {'waypoints': []},\n                'replan_type': replan_result['replan_type'],\n                'reasoning': reasoning,\n                'confidence': replan_result['confidence'],\n                'impact_analysis': {\n                    'fuel_impact': replan_result['fuel_impact'],\n                    'time_impact': replan_result['time_impact']\n                },\n                'implementation_steps': [\n                    'Validate new trajectory parameters',\n                    'Calculate required maneuvers',\n                    'Update mission timeline'\n                ],\n                'requires_approval': emergency_level != 'critical',\n                'alternatives_considered': []\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Autonomous replanning failed: {str(e)}\")\n    \n    def generate_detailed_explanation(self, decision_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Generate detailed explanation for a decision\"\"\"\n        try:\n            return {\n                'reasoning_tree': [\n                    {'step': 1, 'reasoning': 'Analyzed mission context'},\n                    {'step': 2, 'reasoning': 'Generated alternatives'},\n                    {'step': 3, 'reasoning': 'Selected optimal solution'}\n                ],\n                'alternatives_considered': [],\n                'explanation_text': 'AI system selected the optimal trajectory based on safety and efficiency criteria.',\n                'decision_factors': {},\n                'confidence_analysis': 'High confidence decision'\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Decision explanation generation failed: {str(e)}\")","size_bytes":4730},"OdinOptimal/python_backend/services/lambert_solver.py":{"content":"\"\"\"\nLambert's Problem Solver for ODIN System\nSolves the two-point boundary value problem for orbital mechanics\n\"\"\"\n\nimport numpy as np\nimport math\nfrom scipy.optimize import fsolve\n\nclass LambertSolver:\n    \"\"\"Solves Lambert's problem for trajectory planning\"\"\"\n    \n    def __init__(self):\n        self.MU_EARTH = 3.986004418e14  # Earth's gravitational parameter (m³/s²)\n        self.TOLERANCE = 1e-10\n        self.MAX_ITERATIONS = 100\n    \n    def solve(self, r1_vec, r2_vec, transfer_time, mu=None):\n        \"\"\"\n        Solve Lambert's problem to find velocity vectors\n        \n        Args:\n            r1_vec: Initial position vector [x, y, z] in meters\n            r2_vec: Final position vector [x, y, z] in meters  \n            transfer_time: Time of flight in seconds\n            mu: Gravitational parameter (defaults to Earth)\n        \n        Returns:\n            Dictionary with velocity vectors and trajectory parameters\n        \"\"\"\n        try:\n            if mu is None:\n                mu = self.MU_EARTH\n                \n            # Convert to numpy arrays\n            r1 = np.array(r1_vec, dtype=float)\n            r2 = np.array(r2_vec, dtype=float)\n            \n            # Calculate magnitudes\n            r1_mag = np.linalg.norm(r1)\n            r2_mag = np.linalg.norm(r2)\n            \n            # Calculate delta theta (angle between position vectors)\n            cos_dtheta = np.dot(r1, r2) / (r1_mag * r2_mag)\n            cos_dtheta = np.clip(cos_dtheta, -1, 1)  # Avoid numerical errors\n            dtheta = math.acos(cos_dtheta)\n            \n            # Choose short or long way (default to short way)\n            if dtheta > math.pi:\n                dtheta = 2 * math.pi - dtheta\n                long_way = True\n            else:\n                long_way = False\n            \n            # Calculate chord length\n            c = np.linalg.norm(r2 - r1)\n            \n            # Calculate semi-perimeter\n            s = (r1_mag + r2_mag + c) / 2\n            \n            # Minimum energy transfer calculations\n            a_min = s / 2\n            \n            # Check if transfer time is feasible\n            if transfer_time <= 0:\n                raise ValueError(\"Transfer time must be positive\")\n            \n            # Solve for semi-major axis using universal variable\n            a = self._solve_lambert_universal(r1_mag, r2_mag, dtheta, transfer_time, mu, long_way)\n            \n            # Calculate eccentricity and other orbital elements\n            f = 1 - a * (1 - math.cos(dtheta)) / r1_mag\n            g = transfer_time - math.sqrt(a**3 / mu) * (dtheta - math.sin(dtheta))\n            \n            # Calculate velocity vectors\n            v1 = (r2 - f * r1) / g\n            \n            f_dot = math.sqrt(mu / a) * math.tan(dtheta / 2) * ((1 - math.cos(dtheta)) / r1_mag - (1 - math.cos(dtheta)) / r2_mag) / 2\n            g_dot = 1 - a * (1 - math.cos(dtheta)) / r2_mag\n            \n            v2 = f_dot * r1 + g_dot * v1\n            \n            # Calculate orbital parameters\n            h_vec = np.cross(r1, v1)  # Angular momentum vector\n            h = np.linalg.norm(h_vec)\n            \n            # Energy and eccentricity\n            energy = np.dot(v1, v1) / 2 - mu / r1_mag\n            ecc_vec = np.cross(v1, h_vec) / mu - r1 / r1_mag\n            eccentricity = np.linalg.norm(ecc_vec)\n            \n            # Delta-V calculation\n            v1_circular = math.sqrt(mu / r1_mag)\n            v2_circular = math.sqrt(mu / r2_mag)\n            delta_v1 = np.linalg.norm(v1) - v1_circular\n            delta_v2 = abs(v2_circular - np.linalg.norm(v2))\n            delta_v_total = abs(delta_v1) + abs(delta_v2)\n            \n            # Fuel efficiency calculation\n            fuel_efficiency = max(0, 100 * (1 - delta_v_total / 15000))\n            \n            return {\n                'v1': v1.tolist(),\n                'v2': v2.tolist(),\n                'semi_major_axis': a,\n                'eccentricity': eccentricity,\n                'delta_v_total': delta_v_total,\n                'delta_v1': delta_v1,\n                'delta_v2': delta_v2,\n                'transfer_time': transfer_time,\n                'fuel_efficiency': fuel_efficiency,\n                'angular_momentum': h,\n                'energy': energy,\n                'trajectory_type': 'lambert'\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Lambert solver failed: {str(e)}\")\n    \n    def _solve_lambert_universal(self, r1, r2, dtheta, t, mu, long_way=False):\n        \"\"\"Solve Lambert's problem using universal variables\"\"\"\n        \n        # Initial guess for semi-major axis\n        c = math.sqrt(r1**2 + r2**2 - 2*r1*r2*math.cos(dtheta))\n        s = (r1 + r2 + c) / 2\n        a_min = s / 2\n        \n        # Initial guess\n        if t < math.pi * math.sqrt(2 * s**3 / (8 * mu)):\n            a_guess = a_min\n        else:\n            a_guess = a_min * 1.1\n        \n        # Newton-Raphson iteration to solve for semi-major axis\n        a = a_guess\n        for i in range(self.MAX_ITERATIONS):\n            alpha = 2 * math.asin(math.sqrt(s / (2 * a)))\n            beta = 2 * math.asin(math.sqrt((s - c) / (2 * a)))\n            \n            if long_way:\n                alpha = 2 * math.pi - alpha\n            \n            t_calculated = math.sqrt(a**3 / mu) * (alpha - beta - (math.sin(alpha) - math.sin(beta)))\n            \n            # Check convergence\n            if abs(t_calculated - t) < self.TOLERANCE:\n                return a\n            \n            # Newton-Raphson update\n            dt_da = (3/2) * math.sqrt(a / mu) * (alpha - beta - (math.sin(alpha) - math.sin(beta)))\n            dt_da += math.sqrt(a**3 / mu) * (1/math.sqrt(a)) * (math.cos(alpha) - math.cos(beta))\n            \n            if abs(dt_da) < self.TOLERANCE:\n                break\n                \n            a = a - (t_calculated - t) / dt_da\n            \n            # Ensure positive semi-major axis\n            a = max(a, a_min * 0.9)\n        \n        return a","size_bytes":6030},"OdinOptimal/python_backend/services/space_weather.py":{"content":"\"\"\"\nODIN Space Weather Service\nProvides space weather data and forecasting for mission planning\n\"\"\"\n\nimport requests\nimport random\nfrom datetime import datetime, timedelta\n\nclass SpaceWeatherService:\n    \"\"\"Space weather monitoring and forecasting service\"\"\"\n    \n    def __init__(self):\n        self.noaa_api_base = \"https://services.swpc.noaa.gov/products\"\n        self.solar_flux_threshold = 150  # SFU (Solar Flux Units)\n        self.geomagnetic_threshold = 5   # Kp index\n    \n    def get_current_solar_activity(self):\n        \"\"\"Get current solar activity data\"\"\"\n        try:\n            # In production, this would fetch real NOAA/NASA data\n            # For now, simulating realistic space weather data\n            \n            current_time = datetime.utcnow()\n            \n            # Simulate solar flux (realistic range: 70-300 SFU)\n            solar_flux = random.uniform(75, 280)\n            \n            # Simulate geomagnetic index (Kp: 0-9)\n            geomagnetic_index = random.uniform(0, 7)\n            \n            # Generate solar events based on current activity\n            solar_events = []\n            if solar_flux > self.solar_flux_threshold:\n                solar_events.append({\n                    'type': 'solar_flare',\n                    'class': self._classify_solar_flare(solar_flux),\n                    'peak_time': current_time.isoformat(),\n                    'intensity': solar_flux,\n                    'duration': random.randint(10, 180)  # minutes\n                })\n            \n            if geomagnetic_index > self.geomagnetic_threshold:\n                solar_events.append({\n                    'type': 'geomagnetic_storm',\n                    'severity': self._classify_geomagnetic_storm(geomagnetic_index),\n                    'start_time': (current_time - timedelta(hours=2)).isoformat(),\n                    'duration': random.randint(6, 48)  # hours\n                })\n            \n            # Check for CME events\n            if random.random() > 0.85:  # 15% chance\n                solar_events.append({\n                    'type': 'cme',\n                    'speed': random.uniform(300, 2000),  # km/s\n                    'arrival_time': (current_time + timedelta(hours=random.uniform(18, 72))).isoformat(),\n                    'impact_probability': random.uniform(0.3, 0.9)\n                })\n            \n            return {\n                'timestamp': current_time.isoformat(),\n                'solar_flux': solar_flux,\n                'geomagnetic_index': geomagnetic_index,\n                'solar_events': solar_events,\n                'risk_level': self._calculate_risk_level(solar_flux, geomagnetic_index),\n                'data_source': 'NOAA SWPC (simulated)'\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Failed to get solar activity data: {str(e)}\")\n    \n    def get_solar_activity_forecast(self, start_time, end_time):\n        \"\"\"Get solar activity forecast for specified time period\"\"\"\n        try:\n            forecast_hours = int((end_time - start_time).total_seconds() / 3600)\n            forecast_data = []\n            \n            current = start_time\n            while current <= end_time:\n                # Simulate forecast with some randomness\n                base_flux = 120 + random.uniform(-30, 80)\n                base_kp = 2.5 + random.uniform(-1.5, 3.5)\n                \n                # Add some temporal correlation\n                if forecast_data:\n                    prev_flux = forecast_data[-1]['solar_flux']\n                    prev_kp = forecast_data[-1]['geomagnetic_index']\n                    base_flux = prev_flux * 0.8 + base_flux * 0.2\n                    base_kp = prev_kp * 0.7 + base_kp * 0.3\n                \n                forecast_point = {\n                    'timestamp': current.isoformat(),\n                    'solar_flux': max(70, min(300, base_flux)),\n                    'geomagnetic_index': max(0, min(9, base_kp)),\n                    'confidence': random.uniform(0.6, 0.9)\n                }\n                \n                # Add probability of significant events\n                if forecast_point['solar_flux'] > 180:\n                    forecast_point['flare_probability'] = random.uniform(0.2, 0.7)\n                if forecast_point['geomagnetic_index'] > 4:\n                    forecast_point['storm_probability'] = random.uniform(0.3, 0.8)\n                \n                forecast_data.append(forecast_point)\n                current += timedelta(hours=6)  # 6-hour intervals\n            \n            return {\n                'forecast_period': {\n                    'start': start_time.isoformat(),\n                    'end': end_time.isoformat()\n                },\n                'forecast_data': forecast_data,\n                'summary': self._generate_forecast_summary(forecast_data),\n                'high_risk_periods': self._identify_high_risk_periods(forecast_data)\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Failed to generate solar activity forecast: {str(e)}\")\n    \n    def get_24h_forecast(self):\n        \"\"\"Get 24-hour space weather forecast\"\"\"\n        start_time = datetime.utcnow()\n        end_time = start_time + timedelta(hours=24)\n        return self.get_solar_activity_forecast(start_time, end_time)\n    \n    def _classify_solar_flare(self, solar_flux):\n        \"\"\"Classify solar flare based on intensity\"\"\"\n        if solar_flux < 150:\n            return 'A'\n        elif solar_flux < 170:\n            return 'B'\n        elif solar_flux < 200:\n            return 'C'\n        elif solar_flux < 230:\n            return 'M'\n        else:\n            return 'X'\n    \n    def _classify_geomagnetic_storm(self, kp_index):\n        \"\"\"Classify geomagnetic storm based on Kp index\"\"\"\n        if kp_index < 5:\n            return 'minor'\n        elif kp_index < 6:\n            return 'moderate'\n        elif kp_index < 7:\n            return 'strong'\n        elif kp_index < 8:\n            return 'severe'\n        else:\n            return 'extreme'\n    \n    def _calculate_risk_level(self, solar_flux, geomagnetic_index):\n        \"\"\"Calculate overall space weather risk level\"\"\"\n        flux_risk = min(solar_flux / 300, 1.0)\n        geo_risk = min(geomagnetic_index / 9, 1.0)\n        \n        combined_risk = (flux_risk * 0.6 + geo_risk * 0.4)\n        \n        if combined_risk < 0.3:\n            return 0.1  # Low risk\n        elif combined_risk < 0.6:\n            return 0.4  # Moderate risk\n        elif combined_risk < 0.8:\n            return 0.7  # High risk\n        else:\n            return 0.9  # Critical risk\n    \n    def _generate_forecast_summary(self, forecast_data):\n        \"\"\"Generate human-readable forecast summary\"\"\"\n        max_flux = max(point['solar_flux'] for point in forecast_data)\n        max_kp = max(point['geomagnetic_index'] for point in forecast_data)\n        \n        summary = []\n        \n        if max_flux > 200:\n            summary.append(f\"High solar activity expected (max flux: {max_flux:.0f} SFU)\")\n        elif max_flux > 150:\n            summary.append(f\"Moderate solar activity expected (max flux: {max_flux:.0f} SFU)\")\n        else:\n            summary.append(\"Low to moderate solar activity expected\")\n        \n        if max_kp > 6:\n            summary.append(f\"Geomagnetic storms possible (max Kp: {max_kp:.1f})\")\n        elif max_kp > 4:\n            summary.append(f\"Minor geomagnetic disturbances possible (max Kp: {max_kp:.1f})\")\n        \n        return summary\n    \n    def _identify_high_risk_periods(self, forecast_data):\n        \"\"\"Identify periods with elevated space weather risk\"\"\"\n        high_risk_periods = []\n        \n        for i, point in enumerate(forecast_data):\n            risk_score = self._calculate_risk_level(point['solar_flux'], point['geomagnetic_index'])\n            \n            if risk_score > 0.6:  # High or critical risk\n                high_risk_periods.append({\n                    'timestamp': point['timestamp'],\n                    'risk_score': risk_score,\n                    'solar_flux': point['solar_flux'],\n                    'geomagnetic_index': point['geomagnetic_index'],\n                    'duration': '6 hours'  # Forecast interval\n                })\n        \n        return high_risk_periods","size_bytes":8318},"OdinOptimal/python_backend/services/threat_monitor.py":{"content":"\"\"\"\nODIN Threat Detection & Risk Assessment Service\nMonitors and analyzes various space threats for mission planning\n\"\"\"\n\nimport numpy as np\nimport random\nfrom datetime import datetime, timedelta\n\nclass ThreatMonitor:\n    \"\"\"Threat detection and risk assessment service\"\"\"\n    \n    def __init__(self):\n        self.debris_database_size = 15000  # Simulated debris objects\n        self.radiation_zones = [\n            {'name': 'Van Allen Inner Belt', 'altitude_range': [200, 5000], 'intensity': 'high'},\n            {'name': 'Van Allen Outer Belt', 'altitude_range': [13000, 60000], 'intensity': 'medium'},\n            {'name': 'Solar Particle Events', 'altitude_range': [0, 100000], 'intensity': 'variable'}\n        ]\n    \n    def analyze_debris_risk(self, trajectory, start_time, end_time):\n        \"\"\"Analyze space debris collision risk along trajectory\"\"\"\n        try:\n            # Simulate debris tracking (in reality would use NASA CARA data)\n            high_risk_objects = []\n            collision_probabilities = []\n            \n            # Generate simulated debris encounters\n            num_encounters = random.randint(3, 12)\n            \n            for i in range(num_encounters):\n                debris_obj = {\n                    'object_id': f\"DEBRIS_{random.randint(10000, 99999)}\",\n                    'closest_approach_time': start_time + timedelta(\n                        seconds=random.uniform(0, (end_time - start_time).total_seconds())\n                    ),\n                    'miss_distance': random.uniform(50, 5000),  # meters\n                    'relative_velocity': random.uniform(1000, 15000),  # m/s\n                    'object_size': random.uniform(0.1, 2.0),  # meters\n                    'collision_probability': random.uniform(1e-8, 1e-4)\n                }\n                \n                if debris_obj['collision_probability'] > 1e-6:\n                    high_risk_objects.append(debris_obj)\n                \n                collision_probabilities.append({\n                    'time': debris_obj['closest_approach_time'].isoformat(),\n                    'probability': debris_obj['collision_probability'],\n                    'object_id': debris_obj['object_id']\n                })\n            \n            # Generate avoidance maneuvers if needed\n            avoidance_options = []\n            if high_risk_objects:\n                avoidance_options = [\n                    {\n                        'maneuver_type': 'radial_burn',\n                        'delta_v': random.uniform(0.5, 5.0),\n                        'execution_time': obj['closest_approach_time'] - timedelta(hours=2),\n                        'risk_reduction': random.uniform(0.8, 0.99)\n                    }\n                    for obj in high_risk_objects[:3]  # Limit to top 3 risks\n                ]\n            \n            return {\n                'objects': high_risk_objects,\n                'collision_probs': collision_probabilities,\n                'avoidance_options': avoidance_options,\n                'peak_risk_time': max(collision_probabilities, key=lambda x: x['probability'])['time'] if collision_probabilities else None,\n                'total_risk_score': sum(p['probability'] for p in collision_probabilities) * 1e6\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Debris risk analysis failed: {str(e)}\")\n    \n    def calculate_radiation_exposure(self, trajectory):\n        \"\"\"Calculate radiation exposure for given trajectory\"\"\"\n        try:\n            # Simplified radiation calculation\n            total_dose = 0\n            high_radiation_zones = []\n            \n            # Simulate trajectory points\n            if isinstance(trajectory, dict) and 'waypoints' in trajectory:\n                waypoints = trajectory['waypoints']\n            else:\n                # Generate sample waypoints if not provided\n                waypoints = [\n                    {'position': [7000000, 0, 0], 'time': 0},\n                    {'position': [20000000, 15000000, 0], 'time': 86400},\n                    {'position': [384400000, 0, 0], 'time': 259200}  # 3 days\n                ]\n            \n            for point in waypoints:\n                position = point['position']\n                altitude = np.linalg.norm(position) - 6371000  # Altitude above Earth surface\n                \n                # Check radiation zones\n                dose_rate = self._calculate_dose_rate(altitude)\n                exposure_time = 3600  # 1 hour segments\n                total_dose += dose_rate * exposure_time\n                \n                if dose_rate > 0.1:  # High radiation threshold\n                    high_radiation_zones.append({\n                        'position': position,\n                        'altitude': altitude,\n                        'dose_rate': dose_rate,\n                        'zone_type': self._identify_radiation_zone(altitude)\n                    })\n            \n            # Protection recommendations\n            protection_measures = []\n            if total_dose > 100:  # mSv\n                protection_measures.append(\"Implement radiation shielding\")\n                protection_measures.append(\"Minimize time in high-radiation zones\")\n            \n            crew_safety = 'safe'\n            if total_dose > 500:\n                crew_safety = 'critical'\n            elif total_dose > 200:\n                crew_safety = 'elevated_risk'\n            \n            return {\n                'total_dose': total_dose,\n                'dose_rate': total_dose / (3 * 24),  # Average per hour\n                'high_radiation_zones': high_radiation_zones,\n                'protection_measures': protection_measures,\n                'crew_safety': crew_safety\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Radiation exposure calculation failed: {str(e)}\")\n    \n    def predict_comm_blackouts(self, trajectory, start_time, end_time):\n        \"\"\"Predict communication blackout periods\"\"\"\n        try:\n            blackout_periods = []\n            \n            # Simulate communication blackouts\n            duration = (end_time - start_time).total_seconds()\n            \n            # Lunar occultation periods\n            if duration > 12 * 3600:  # More than 12 hours\n                blackout_periods.append({\n                    'type': 'lunar_occultation',\n                    'start': start_time + timedelta(hours=24),\n                    'end': start_time + timedelta(hours=25.5),\n                    'duration': 5400,  # 1.5 hours\n                    'cause': 'Moon blocking Earth communication'\n                })\n            \n            # Solar radio blackouts\n            if random.random() > 0.7:  # 30% chance\n                blackout_periods.append({\n                    'type': 'solar_radio_blackout',\n                    'start': start_time + timedelta(hours=random.uniform(6, 48)),\n                    'end': start_time + timedelta(hours=random.uniform(6, 48) + random.uniform(0.5, 4)),\n                    'duration': random.uniform(1800, 14400),  # 30 min to 4 hours\n                    'cause': 'Solar flare radio interference'\n                })\n            \n            return blackout_periods\n            \n        except Exception as e:\n            raise Exception(f\"Communication blackout prediction failed: {str(e)}\")\n    \n    def calculate_overall_risk(self, threats):\n        \"\"\"Calculate overall mission risk assessment\"\"\"\n        try:\n            risk_factors = {}\n            total_risk_score = 0\n            \n            # Solar activity risk\n            solar_data = threats.get('solar_activity', {})\n            solar_risk = min(solar_data.get('risk_level', 0.1) * 100, 100)\n            risk_factors['solar_activity'] = solar_risk\n            total_risk_score += solar_risk * 0.3\n            \n            # Debris risk\n            debris_data = threats.get('space_debris', {})\n            debris_risk = min(debris_data.get('total_risk_score', 0) * 10, 100)\n            risk_factors['space_debris'] = debris_risk\n            total_risk_score += debris_risk * 0.4\n            \n            # Radiation risk\n            radiation_data = threats.get('radiation_exposure', {})\n            crew_safety = radiation_data.get('crew_safety', 'safe')\n            radiation_risk = {'safe': 10, 'elevated_risk': 50, 'critical': 90}.get(crew_safety, 10)\n            risk_factors['radiation'] = radiation_risk\n            total_risk_score += radiation_risk * 0.3\n            \n            # Overall assessment\n            if total_risk_score < 20:\n                risk_level = 'low'\n            elif total_risk_score < 50:\n                risk_level = 'medium'\n            elif total_risk_score < 75:\n                risk_level = 'high'\n            else:\n                risk_level = 'critical'\n            \n            return {\n                'overall_score': min(total_risk_score, 100),\n                'risk_level': risk_level,\n                'risk_factors': risk_factors,\n                'confidence': random.uniform(0.75, 0.95)\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Overall risk calculation failed: {str(e)}\")\n    \n    def generate_recommendations(self, threats):\n        \"\"\"Generate threat mitigation recommendations\"\"\"\n        recommendations = []\n        \n        # Solar activity recommendations\n        solar_data = threats.get('solar_activity', {})\n        if solar_data.get('risk_level', 0) > 0.5:\n            recommendations.append(\"Monitor solar activity forecasts closely\")\n            recommendations.append(\"Consider delaying launch if major solar storm predicted\")\n        \n        # Debris recommendations\n        debris_data = threats.get('space_debris', {})\n        if debris_data.get('total_risk_score', 0) > 0.01:\n            recommendations.append(\"Implement debris avoidance maneuvers\")\n            recommendations.append(\"Increase tracking frequency during high-risk periods\")\n        \n        # Radiation recommendations\n        radiation_data = threats.get('radiation_exposure', {})\n        if radiation_data.get('crew_safety') != 'safe':\n            recommendations.append(\"Enhance radiation shielding\")\n            recommendations.append(\"Minimize crew EVA activities during transit\")\n        \n        return recommendations\n    \n    def identify_critical_periods(self, threats, start_time, end_time):\n        \"\"\"Identify critical time periods with elevated risk\"\"\"\n        critical_periods = []\n        \n        # Add debris high-risk periods\n        debris_data = threats.get('space_debris', {})\n        if debris_data.get('peak_risk_time'):\n            critical_periods.append({\n                'start': debris_data['peak_risk_time'],\n                'type': 'debris_encounter',\n                'severity': 'high'\n            })\n        \n        # Add communication blackouts\n        comm_data = threats.get('communication_blackouts', [])\n        for blackout in comm_data:\n            critical_periods.append({\n                'start': blackout['start'].isoformat() if hasattr(blackout['start'], 'isoformat') else blackout['start'],\n                'end': blackout['end'].isoformat() if hasattr(blackout['end'], 'isoformat') else blackout['end'],\n                'type': 'communication_blackout',\n                'severity': 'medium'\n            })\n        \n        return critical_periods\n    \n    def _calculate_dose_rate(self, altitude):\n        \"\"\"Calculate radiation dose rate at given altitude\"\"\"\n        # Simplified radiation model\n        if 200 <= altitude <= 5000:  # Van Allen inner belt\n            return 0.5 + (altitude - 200) / 4800 * 2.0  # 0.5 to 2.5 mSv/hr\n        elif 13000 <= altitude <= 60000:  # Van Allen outer belt\n            return 0.1 + (altitude - 13000) / 47000 * 0.8  # 0.1 to 0.9 mSv/hr\n        else:\n            return 0.01  # Background radiation\n    \n    def _identify_radiation_zone(self, altitude):\n        \"\"\"Identify which radiation zone the altitude falls into\"\"\"\n        for zone in self.radiation_zones:\n            if zone['altitude_range'][0] <= altitude <= zone['altitude_range'][1]:\n                return zone['name']\n        return 'Interplanetary space'\n    \n    def track_orbital_debris(self, trajectory, time_window):\n        \"\"\"Track orbital debris along trajectory\"\"\"\n        return self.analyze_debris_risk(trajectory, \n                                      datetime.utcnow(), \n                                      datetime.utcnow() + timedelta(hours=time_window))\n    \n    def calculate_detailed_radiation_exposure(self, trajectory, crew_size, mission_duration):\n        \"\"\"Calculate detailed radiation exposure analysis\"\"\"\n        base_result = self.calculate_radiation_exposure(trajectory)\n        \n        # Adjust for crew size and mission duration\n        crew_factor = 1.0 + (crew_size - 1) * 0.1  # Slight increase for larger crews\n        duration_factor = mission_duration / 3.0  # Normalized to 3 days\n        \n        adjusted_dose = base_result['total_dose'] * duration_factor * crew_factor\n        \n        return {\n            **base_result,\n            'total_dose': adjusted_dose,\n            'crew_adjusted_dose': adjusted_dose / max(crew_size, 1)\n        }","size_bytes":13258},"OdinOptimal/python_backend/services/trajectory_engine.py":{"content":"\"\"\"\nODIN Trajectory Planning Engine\nImplements orbital mechanics calculations for spacecraft trajectory planning\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\nimport math\n\nclass TrajectoryEngine:\n    \"\"\"Core trajectory planning and optimization engine\"\"\"\n    \n    def __init__(self):\n        # Orbital mechanics constants\n        self.MU_EARTH = 3.986004418e14  # Earth's gravitational parameter (m³/s²)\n        self.MU_MOON = 4.9048695e12     # Moon's gravitational parameter (m³/s²)\n        self.EARTH_RADIUS = 6371000     # Earth radius (m)\n        self.MOON_RADIUS = 1737400      # Moon radius (m)\n        self.EARTH_MOON_DISTANCE = 384400000  # Average Earth-Moon distance (m)\n    \n    def calculate_hohmann_transfer(self, start_pos, end_pos):\n        \"\"\"Calculate Hohmann transfer orbit between two positions\"\"\"\n        try:\n            # Convert positions to numpy arrays\n            r1 = np.array(start_pos)\n            r2 = np.array(end_pos)\n            \n            # Calculate orbital radii\n            r1_mag = np.linalg.norm(r1)\n            r2_mag = np.linalg.norm(r2)\n            \n            # Semi-major axis of transfer orbit\n            a_transfer = (r1_mag + r2_mag) / 2\n            \n            # Velocities at transfer points\n            v1_transfer = math.sqrt(self.MU_EARTH * (2/r1_mag - 1/a_transfer))\n            v2_transfer = math.sqrt(self.MU_EARTH * (2/r2_mag - 1/a_transfer))\n            \n            # Circular velocities at start and end\n            v1_circular = math.sqrt(self.MU_EARTH / r1_mag)\n            v2_circular = math.sqrt(self.MU_EARTH / r2_mag)\n            \n            # Delta-V calculations\n            delta_v1 = abs(v1_transfer - v1_circular)\n            delta_v2 = abs(v2_circular - v2_transfer)\n            delta_v_total = delta_v1 + delta_v2\n            \n            # Transfer time (half orbit period)\n            transfer_time = math.pi * math.sqrt(a_transfer**3 / self.MU_EARTH)\n            \n            # Fuel efficiency calculation (inverse of delta-V)\n            fuel_efficiency = max(0, 100 * (1 - delta_v_total / 15000))  # Normalized\n            \n            return {\n                'delta_v_total': delta_v_total,\n                'delta_v1': delta_v1,\n                'delta_v2': delta_v2,\n                'transfer_time': transfer_time,\n                'fuel_efficiency': fuel_efficiency,\n                'semi_major_axis': a_transfer,\n                'trajectory_type': 'hohmann'\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Hohmann transfer calculation failed: {str(e)}\")\n    \n    def calculate_bi_elliptic_transfer(self, start_pos, end_pos):\n        \"\"\"Calculate bi-elliptic transfer orbit\"\"\"\n        try:\n            r1 = np.linalg.norm(start_pos)\n            r2 = np.linalg.norm(end_pos)\n            \n            # Optimal intermediate radius (typically 2-3 times the larger radius)\n            r_intermediate = 2.5 * max(r1, r2)\n            \n            # First transfer (to intermediate orbit)\n            a1 = (r1 + r_intermediate) / 2\n            v1_transfer1 = math.sqrt(self.MU_EARTH * (2/r1 - 1/a1))\n            v1_circular = math.sqrt(self.MU_EARTH / r1)\n            delta_v1 = abs(v1_transfer1 - v1_circular)\n            time1 = math.pi * math.sqrt(a1**3 / self.MU_EARTH)\n            \n            # Second transfer (from intermediate to final orbit)\n            a2 = (r_intermediate + r2) / 2\n            v_intermediate1 = math.sqrt(self.MU_EARTH * (2/r_intermediate - 1/a1))\n            v_intermediate2 = math.sqrt(self.MU_EARTH * (2/r_intermediate - 1/a2))\n            delta_v2 = abs(v_intermediate2 - v_intermediate1)\n            time2 = math.pi * math.sqrt(a2**3 / self.MU_EARTH)\n            \n            # Final velocity change\n            v2_transfer = math.sqrt(self.MU_EARTH * (2/r2 - 1/a2))\n            v2_circular = math.sqrt(self.MU_EARTH / r2)\n            delta_v3 = abs(v2_circular - v2_transfer)\n            \n            delta_v_total = delta_v1 + delta_v2 + delta_v3\n            transfer_time = time1 + time2\n            fuel_efficiency = max(0, 100 * (1 - delta_v_total / 18000))\n            \n            return {\n                'delta_v_total': delta_v_total,\n                'delta_v1': delta_v1,\n                'delta_v2': delta_v2,\n                'delta_v3': delta_v3,\n                'transfer_time': transfer_time,\n                'fuel_efficiency': fuel_efficiency,\n                'intermediate_radius': r_intermediate,\n                'trajectory_type': 'bi_elliptic'\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Bi-elliptic transfer calculation failed: {str(e)}\")\n    \n    def multi_objective_optimization(self, start_pos, end_pos, constraints, weights):\n        \"\"\"Multi-objective trajectory optimization\"\"\"\n        try:\n            # Calculate different transfer options\n            hohmann = self.calculate_hohmann_transfer(start_pos, end_pos)\n            bi_elliptic = self.calculate_bi_elliptic_transfer(start_pos, end_pos)\n            \n            alternatives = [hohmann, bi_elliptic]\n            \n            # Score each alternative based on weighted criteria\n            best_score = -1\n            optimal_trajectory = None\n            \n            for trajectory in alternatives:\n                # Normalize metrics (0-1 scale)\n                fuel_score = trajectory['fuel_efficiency'] / 100\n                time_score = max(0, 1 - trajectory['transfer_time'] / (7 * 24 * 3600))  # Normalize to 7 days\n                safety_score = 0.8  # Simplified safety score\n                \n                # Calculate weighted score\n                total_score = (\n                    weights['fuel_efficiency'] * fuel_score +\n                    weights['travel_time'] * time_score +\n                    weights['safety_score'] * safety_score\n                )\n                \n                trajectory['optimization_score'] = total_score\n                \n                if total_score > best_score:\n                    best_score = total_score\n                    optimal_trajectory = trajectory\n            \n            return {\n                'optimal_trajectory': optimal_trajectory,\n                'alternatives': alternatives,\n                'trade_offs': {\n                    'best_fuel_efficiency': max(alt['fuel_efficiency'] for alt in alternatives),\n                    'shortest_time': min(alt['transfer_time'] for alt in alternatives),\n                    'optimization_weights': weights\n                }\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Multi-objective optimization failed: {str(e)}\")\n    \n    def validate_trajectory(self, trajectory_data):\n        \"\"\"Validate trajectory for safety and feasibility\"\"\"\n        try:\n            issues = []\n            recommendations = []\n            safety_score = 100\n            \n            # Check delta-V requirements\n            if trajectory_data.get('delta_v_total', 0) > 20000:  # m/s\n                issues.append(\"Excessive delta-V requirement\")\n                safety_score -= 30\n                recommendations.append(\"Consider alternative trajectory with lower fuel requirements\")\n            \n            # Check transfer time\n            if trajectory_data.get('transfer_time', 0) > 10 * 24 * 3600:  # 10 days\n                issues.append(\"Extended transfer time increases risk\")\n                safety_score -= 20\n                recommendations.append(\"Optimize for shorter transfer time\")\n            \n            # Check fuel efficiency\n            if trajectory_data.get('fuel_efficiency', 100) < 50:\n                issues.append(\"Low fuel efficiency\")\n                safety_score -= 25\n                recommendations.append(\"Improve trajectory optimization\")\n            \n            return {\n                'is_valid': safety_score >= 50,\n                'issues': issues,\n                'recommendations': recommendations,\n                'safety_score': max(0, safety_score)\n            }\n            \n        except Exception as e:\n            raise Exception(f\"Trajectory validation failed: {str(e)}\")","size_bytes":8161},"OdinOptimal/client/src/components/AppSidebar.tsx":{"content":"import { \n  Sidebar, \n  SidebarContent, \n  SidebarGroup, \n  SidebarGroupContent, \n  SidebarGroupLabel, \n  SidebarMenu, \n  SidebarMenuButton, \n  SidebarMenuItem \n} from \"@/components/ui/sidebar\"\nimport { Home, Rocket, Shield, Brain, History, Settings, Globe, Target } from \"lucide-react\"\nimport { useLocation } from \"wouter\"\nimport { Link } from \"wouter\"\n\nconst menuItems = [\n  { title: \"Mission Control\", url: \"/dashboard\", icon: Home },\n  { title: \"Trajectory Planning\", url: \"/trajectory\", icon: Target },\n  { title: \"Active Missions\", url: \"/dashboard\", icon: Rocket },\n  { title: \"Threat Detection\", url: \"/threats\", icon: Shield },\n  { title: \"AI Decisions\", url: \"/decisions\", icon: Brain },\n  { title: \"Mission History\", url: \"/dashboard\", icon: History },\n  { title: \"Global Settings\", url: \"/dashboard\", icon: Globe },\n  { title: \"System Config\", url: \"/dashboard\", icon: Settings },\n]\n\nexport default function AppSidebar() {\n  const [location] = useLocation()\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-space-blue font-semibold\">\n            ODIN Navigator\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild \n                    data-active={location === item.url}\n                    className=\"hover-elevate\"\n                  >\n                    <Link \n                      href={item.url} \n                      data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                      onClick={() => console.log(`Navigated to ${item.title}`)}\n                    >\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}","size_bytes":2122},"OdinOptimal/client/src/components/DecisionLog.tsx":{"content":"import { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { \n  Brain, \n  MessageSquare, \n  TrendingUp, \n  TrendingDown, \n  Clock, \n  Fuel,\n  Timer,\n  Shield\n} from \"lucide-react\"\n\n//todo: remove mock data\nconst mockDecisions = [\n  {\n    id: \"DEC-001\",\n    timestamp: \"2024-03-15T14:30:00Z\",\n    threatDetected: \"Solar flare (X9.3 class)\",\n    originalTrajectory: \"Direct Hohmann transfer\",\n    selectedTrajectory: \"L1 Lagrange point route\",\n    reasoning: \"Rerouting via L1 Lagrange point reduces radiation exposure by 90% with only 6-hour delay. The trade-off analysis shows significantly improved crew safety while maintaining acceptable mission timeline.\",\n    tradeOffs: {\n      fuelCost: \"+12%\",\n      travelTime: \"+6 hours\", \n      radiationReduction: \"-90%\",\n      safetyScore: \"+45%\"\n    },\n    status: \"Implemented\",\n    confidence: 94\n  },\n  {\n    id: \"DEC-002\", \n    timestamp: \"2024-03-14T09:15:00Z\",\n    threatDetected: \"Space debris field (>10cm objects)\",\n    originalTrajectory: \"Standard LEO departure\",\n    selectedTrajectory: \"Modified inclination change\",\n    reasoning: \"Debris collision probability exceeded 1:1000 threshold. Implemented 2.3° inclination adjustment during LEO phase to avoid high-density debris region. Maneuver requires minimal ΔV while ensuring safe corridor.\",\n    tradeOffs: {\n      fuelCost: \"+3%\",\n      travelTime: \"+45 minutes\",\n      collisionRisk: \"-85%\", \n      safetyScore: \"+30%\"\n    },\n    status: \"Completed\",\n    confidence: 98\n  },\n  {\n    id: \"DEC-003\",\n    timestamp: \"2024-03-13T18:45:00Z\", \n    threatDetected: \"Communication blackout prediction\",\n    originalTrajectory: \"Lunar polar approach\",\n    selectedTrajectory: \"Equatorial insertion with relay\",\n    reasoning: \"Solar storm predicted during critical insertion phase would cause 4-hour communication blackout. Alternative trajectory maintains ground contact via relay satellite, enabling real-time monitoring during LOI burn.\",\n    tradeOffs: {\n      fuelCost: \"+8%\",\n      travelTime: \"+2 hours\",\n      communicationUptime: \"+100%\",\n      safetyScore: \"+25%\"\n    },\n    status: \"Active\",\n    confidence: 89\n  }\n]\n\nexport default function DecisionLog() {\n  const [selectedDecision, setSelectedDecision] = useState<string | null>(null)\n  const [feedback, setFeedback] = useState(\"\")\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Implemented\": return \"success-green\"\n      case \"Active\": return \"mission-orange\"\n      case \"Completed\": return \"space-blue\"\n      case \"Rejected\": return \"critical-red\"\n      default: return \"neutral-gray\"\n    }\n  }\n\n  const getTradeOffIcon = (key: string) => {\n    switch (key) {\n      case \"fuelCost\": return Fuel\n      case \"travelTime\": return Timer\n      case \"radiationReduction\": \n      case \"collisionRisk\": return Shield\n      case \"safetyScore\": return TrendingUp\n      default: return TrendingUp\n    }\n  }\n\n  const getTradeOffColor = (value: string) => {\n    if (value.startsWith('+') && (value.includes('Cost') || value.includes('Time'))) return \"critical-red\"\n    if (value.startsWith('-') && (value.includes('Reduction') || value.includes('Risk'))) return \"success-green\"\n    if (value.startsWith('+') && value.includes('Score')) return \"success-green\"\n    return \"mission-orange\"\n  }\n\n  const submitFeedback = () => {\n    console.log('Submitting AI decision feedback:', feedback)\n    setFeedback(\"\")\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-mission-orange\" />\n            AI Decision History & Analysis\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-mission-orange\">12</div>\n              <div className=\"text-sm text-muted-foreground\">Total Decisions</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-success-green\">94%</div>\n              <div className=\"text-sm text-muted-foreground\">Success Rate</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-space-blue\">2.3s</div>\n              <div className=\"text-sm text-muted-foreground\">Avg Response Time</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Decision Log */}\n      <div className=\"space-y-4\">\n        {mockDecisions.map((decision) => {\n          const isSelected = selectedDecision === decision.id\n          \n          return (\n            <Card \n              key={decision.id}\n              className={`hover-elevate cursor-pointer transition-all ${\n                isSelected ? 'ring-2 ring-mission-orange' : ''\n              }`}\n              onClick={() => {\n                setSelectedDecision(isSelected ? null : decision.id)\n                console.log(`${isSelected ? 'Collapsed' : 'Expanded'} decision: ${decision.id}`)\n              }}\n              data-testid={`decision-${decision.id}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-mission-orange/20 text-mission-orange\">\n                        <Brain className=\"w-4 h-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-semibold\">Decision {decision.id}</div>\n                      <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                        <Clock className=\"w-4 h-4\" />\n                        {new Date(decision.timestamp).toLocaleDateString()} {new Date(decision.timestamp).toLocaleTimeString()}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"text-right text-sm\">\n                      <div className=\"font-mono font-bold\">{decision.confidence}%</div>\n                      <div className=\"text-muted-foreground\">Confidence</div>\n                    </div>\n                    <Badge className={`bg-${getStatusColor(decision.status)}/20 text-${getStatusColor(decision.status)}`}>\n                      {decision.status}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-4\">\n                  {/* Threat Summary */}\n                  <div className=\"bg-critical-red/10 border border-critical-red/20 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Shield className=\"w-4 h-4 text-critical-red\" />\n                      <span className=\"font-semibold text-critical-red\">Threat Detected</span>\n                    </div>\n                    <div className=\"text-sm\">{decision.threatDetected}</div>\n                  </div>\n\n                  {/* Decision Summary */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <div className=\"text-sm font-medium text-muted-foreground mb-1\">Original Plan</div>\n                      <div className=\"font-mono text-sm bg-muted/50 p-2 rounded\">\n                        {decision.originalTrajectory}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium text-muted-foreground mb-1\">AI Decision</div>\n                      <div className=\"font-mono text-sm bg-mission-orange/10 p-2 rounded border border-mission-orange/20\">\n                        {decision.selectedTrajectory}\n                      </div>\n                    </div>\n                  </div>\n\n                  {isSelected && (\n                    <div className=\"space-y-4 pt-4 border-t\">\n                      {/* Reasoning */}\n                      <div>\n                        <div className=\"text-sm font-medium text-muted-foreground mb-2\">AI Reasoning</div>\n                        <div className=\"text-sm bg-muted/30 p-3 rounded-lg leading-relaxed\">\n                          {decision.reasoning}\n                        </div>\n                      </div>\n\n                      {/* Trade-offs */}\n                      <div>\n                        <div className=\"text-sm font-medium text-muted-foreground mb-2\">Impact Analysis</div>\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                          {Object.entries(decision.tradeOffs).map(([key, value]) => {\n                            const Icon = getTradeOffIcon(key)\n                            return (\n                              <div key={key} className=\"text-center p-2 bg-muted/30 rounded-lg\">\n                                <Icon className=\"w-4 h-4 mx-auto mb-1 text-muted-foreground\" />\n                                <div className=\"text-xs text-muted-foreground capitalize\">\n                                  {key.replace(/([A-Z])/g, ' $1').trim()}\n                                </div>\n                                <div className={`font-mono font-bold text-sm text-${getTradeOffColor(key)}`}>\n                                  {value}\n                                </div>\n                              </div>\n                            )\n                          })}\n                        </div>\n                      </div>\n\n                      {/* Actions */}\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" className=\"bg-mission-orange hover:bg-mission-orange/90\" data-testid={`button-implement-${decision.id}`}>\n                          Implement Decision\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-modify-${decision.id}`}>\n                          Modify Parameters  \n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-export-${decision.id}`}>\n                          Export Analysis\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n\n      {/* Feedback Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageSquare className=\"w-5 h-5 text-mission-orange\" />\n            Provide AI Feedback\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Share your feedback on AI decision quality, reasoning, or suggestions for improvement...\"\n              value={feedback}\n              onChange={(e) => setFeedback(e.target.value)}\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-feedback\"\n            />\n            <Button \n              onClick={submitFeedback}\n              disabled={!feedback.trim()}\n              className=\"bg-mission-orange hover:bg-mission-orange/90\"\n              data-testid=\"button-submit-feedback\"\n            >\n              Submit Feedback\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":11948},"OdinOptimal/client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Rocket, Shield, Brain, Globe } from \"lucide-react\"\nimport earthImage from \"@assets/generated_images/Earth_from_space_backdrop_d272d337.png\"\n\nexport default function HeroSection() {\n  const handleGetStarted = () => {\n    console.log('Starting new mission planning session')\n  }\n\n  const handleViewDemo = () => {\n    console.log('Opening system demonstration')\n  }\n\n  return (\n    <div className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background Image with Overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ backgroundImage: `url(${earthImage})` }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/80 via-black/60 to-black/40\" />\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center space-y-8\">\n          {/* Main Heading */}\n          <div className=\"space-y-4\">\n            <Badge variant=\"outline\" className=\"bg-mission-orange/20 text-mission-orange border-mission-orange\">\n              <Rocket className=\"w-4 h-4 mr-2\" />\n              Advanced Mission Planning\n            </Badge>\n            <h1 className=\"text-5xl lg:text-7xl font-bold text-white tracking-tight\">\n              ODIN\n            </h1>\n            <h2 className=\"text-2xl lg:text-4xl font-semibold text-lunar-silver\">\n              Optimal Dynamic Interplanetary Navigator\n            </h2>\n            <p className=\"text-xl text-white/80 max-w-3xl mx-auto leading-relaxed\">\n              AI-powered spacecraft trajectory planning system for autonomous Earth-to-Moon missions \n              with real-time threat detection and intelligent decision-making capabilities.\n            </p>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button \n              size=\"lg\" \n              className=\"bg-mission-orange hover:bg-mission-orange/90 text-white px-8 py-3\"\n              onClick={handleGetStarted}\n              data-testid=\"button-get-started\"\n            >\n              <Rocket className=\"w-5 h-5 mr-2\" />\n              Launch Mission Planning\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              className=\"border-white/30 text-white hover:bg-white/10 backdrop-blur-sm px-8 py-3\"\n              onClick={handleViewDemo}\n              data-testid=\"button-view-demo\"\n            >\n              View System Demo\n            </Button>\n          </div>\n\n          {/* Feature Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-16 max-w-4xl mx-auto\">\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover-elevate\">\n              <CardContent className=\"p-6 text-center\">\n                <Shield className=\"w-8 h-8 text-mission-orange mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Real-time Threat Detection</h3>\n                <p className=\"text-white/70\">Monitor solar flares, space debris, and radiation exposure</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover-elevate\">\n              <CardContent className=\"p-6 text-center\">\n                <Brain className=\"w-8 h-8 text-mission-orange mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-white mb-2\">AI Decision Engine</h3>\n                <p className=\"text-white/70\">Intelligent trajectory optimization with natural language explanations</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover-elevate\">\n              <CardContent className=\"p-6 text-center\">\n                <Globe className=\"w-8 h-8 text-mission-orange mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Multilingual Support</h3>\n                <p className=\"text-white/70\">Hindi and English interface with technical terminology</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":4438},"OdinOptimal/client/src/components/LanguageSwitcher.tsx":{"content":"import { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Globe, Check } from \"lucide-react\"\n\nconst languages = [\n  { \n    code: 'en', \n    name: 'English', \n    nativeName: 'English',\n    flag: '🇺🇸'\n  },\n  { \n    code: 'hi', \n    name: 'Hindi', \n    nativeName: 'हिन्दी',\n    flag: '🇮🇳'\n  }\n]\n\nexport default function LanguageSwitcher() {\n  const [currentLanguage, setCurrentLanguage] = useState('en')\n\n  const handleLanguageChange = (languageCode: string) => {\n    setCurrentLanguage(languageCode)\n    console.log(`Language switched to: ${languageCode}`)\n    // In real implementation, this would trigger i18n language change\n  }\n\n  const getCurrentLanguage = () => {\n    return languages.find(lang => lang.code === currentLanguage) || languages[0]\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"gap-2 hover-elevate\"\n          data-testid=\"button-language-switcher\"\n        >\n          <Globe className=\"w-4 h-4\" />\n          <span className=\"hidden sm:inline\">{getCurrentLanguage().nativeName}</span>\n          <span className=\"text-xs\">{getCurrentLanguage().flag}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      \n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        {languages.map((language) => (\n          <DropdownMenuItem\n            key={language.code}\n            onClick={() => handleLanguageChange(language.code)}\n            className=\"flex items-center justify-between gap-2 hover-elevate\"\n            data-testid={`language-option-${language.code}`}\n          >\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg\">{language.flag}</span>\n              <div>\n                <div className=\"font-medium\">{language.nativeName}</div>\n                <div className=\"text-xs text-muted-foreground\">{language.name}</div>\n              </div>\n            </div>\n            \n            {currentLanguage === language.code && (\n              <Check className=\"w-4 h-4 text-mission-orange\" />\n            )}\n          </DropdownMenuItem>\n        ))}\n        \n        <div className=\"px-2 py-1 border-t mt-1\">\n          <Badge variant=\"outline\" className=\"text-xs w-full justify-center\">\n            <Globe className=\"w-3 h-3 mr-1\" />\n            Multilingual System\n          </Badge>\n        </div>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}","size_bytes":2673},"OdinOptimal/client/src/components/MissionDashboard.tsx":{"content":"import { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { \n  Rocket, \n  Shield, \n  Brain, \n  Clock, \n  Fuel, \n  AlertTriangle, \n  CheckCircle,\n  TrendingUp \n} from \"lucide-react\"\n\n//todo: remove mock data\nconst mockMissionData = {\n  activeMissions: 3,\n  completedMissions: 12,\n  threatLevel: \"Low\",\n  fuelEfficiency: 94,\n  systemStatus: \"Operational\"\n}\n\n//todo: remove mock data \nconst mockActiveMissions = [\n  {\n    id: \"ODIN-001\",\n    name: \"Artemis Support Mission\",\n    status: \"Active\",\n    progress: 78,\n    launchDate: \"2024-03-15\",\n    arrivalDate: \"2024-03-18\",\n    threatLevel: \"Low\"\n  },\n  {\n    id: \"ODIN-002\", \n    name: \"Lunar Resource Survey\",\n    status: \"Planning\",\n    progress: 45,\n    launchDate: \"2024-04-22\",\n    arrivalDate: \"2024-04-25\",\n    threatLevel: \"Medium\"\n  },\n  {\n    id: \"ODIN-003\",\n    name: \"Communication Relay\",\n    status: \"Active\", \n    progress: 89,\n    launchDate: \"2024-02-28\",\n    arrivalDate: \"2024-03-03\",\n    threatLevel: \"Low\"\n  }\n]\n\nexport default function MissionDashboard() {\n  const [selectedMission, setSelectedMission] = useState(mockActiveMissions[0].id)\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Active\": return \"success-green\"\n      case \"Planning\": return \"warning-amber\"  \n      case \"Completed\": return \"space-blue\"\n      default: return \"neutral-gray\"\n    }\n  }\n\n  const getThreatColor = (level: string) => {\n    switch (level) {\n      case \"Low\": return \"success-green\"\n      case \"Medium\": return \"warning-amber\"\n      case \"High\": return \"critical-red\"\n      default: return \"neutral-gray\"\n    }\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card data-testid=\"card-active-missions\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Missions</p>\n                <p className=\"text-2xl font-bold\">{mockMissionData.activeMissions}</p>\n              </div>\n              <Rocket className=\"w-8 h-8 text-mission-orange\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-system-status\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">System Status</p>\n                <p className=\"text-2xl font-bold text-success-green\">{mockMissionData.systemStatus}</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-success-green\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-threat-level\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Threat Level</p>\n                <p className=\"text-2xl font-bold text-success-green\">{mockMissionData.threatLevel}</p>\n              </div>\n              <Shield className=\"w-8 h-8 text-success-green\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-fuel-efficiency\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Fuel Efficiency</p>\n                <p className=\"text-2xl font-bold\">{mockMissionData.fuelEfficiency}%</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-success-green\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Mission Details */}\n      <Tabs defaultValue=\"missions\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"missions\" data-testid=\"tab-missions\">Active Missions</TabsTrigger>\n          <TabsTrigger value=\"planning\" data-testid=\"tab-planning\">Trajectory Planning</TabsTrigger>\n          <TabsTrigger value=\"threats\" data-testid=\"tab-threats\">Threat Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"missions\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {mockActiveMissions.map((mission) => (\n              <Card \n                key={mission.id} \n                className={`hover-elevate cursor-pointer transition-all ${\n                  selectedMission === mission.id ? 'ring-2 ring-mission-orange' : ''\n                }`}\n                onClick={() => {\n                  setSelectedMission(mission.id)\n                  console.log(`Selected mission: ${mission.name}`)\n                }}\n                data-testid={`mission-card-${mission.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{mission.name}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">Mission ID: {mission.id}</p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge className={`bg-${getStatusColor(mission.status)}/20 text-${getStatusColor(mission.status)}`}>\n                        {mission.status}\n                      </Badge>\n                      <Badge className={`bg-${getThreatColor(mission.threatLevel)}/20 text-${getThreatColor(mission.threatLevel)}`}>\n                        {mission.threatLevel} Threat\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex items-center justify-between text-sm mb-2\">\n                        <span>Mission Progress</span>\n                        <span>{mission.progress}%</span>\n                      </div>\n                      <Progress value={mission.progress} className=\"h-2\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>Launch: {mission.launchDate}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Rocket className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>Arrival: {mission.arrivalDate}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${mission.id}`}>\n                        View Details\n                      </Button>\n                      <Button size=\"sm\" className=\"bg-mission-orange hover:bg-mission-orange/90\" data-testid={`button-modify-${mission.id}`}>\n                        Modify Trajectory\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"planning\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"w-5 h-5 text-mission-orange\" />\n                AI Trajectory Planning\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-muted-foreground\">\n                  Advanced trajectory optimization using Lambert's problem solver and AI-driven decision making.\n                </p>\n                <div className=\"grid gap-4\">\n                  <Button className=\"bg-mission-orange hover:bg-mission-orange/90\" data-testid=\"button-new-trajectory\">\n                    <Rocket className=\"w-4 h-4 mr-2\" />\n                    Plan New Trajectory\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-optimization\">\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    Fuel Optimization Analysis\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"threats\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-mission-orange\" />\n                Real-time Threat Monitoring\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-success-green\">\n                  <CheckCircle className=\"w-5 h-5\" />\n                  <span>All systems normal - No active threats detected</span>\n                </div>\n                <div className=\"grid gap-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Solar Activity Level:</span>\n                    <Badge className=\"bg-success-green/20 text-success-green\">Low</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Space Debris Risk:</span>\n                    <Badge className=\"bg-success-green/20 text-success-green\">Minimal</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Radiation Exposure:</span>\n                    <Badge className=\"bg-warning-amber/20 text-warning-amber\">Moderate</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}","size_bytes":10389},"OdinOptimal/client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"odin-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"OdinOptimal/client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useTheme } from \"./ThemeProvider\"\n\nexport default function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\"\n    setTheme(newTheme)\n    console.log(`Theme switched to: ${newTheme}`)\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"hover-elevate\"\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}","size_bytes":854},"OdinOptimal/client/src/components/ThreatMonitor.tsx":{"content":"import { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { \n  Shield, \n  AlertTriangle, \n  Zap, \n  Satellite, \n  Radiation, \n  CheckCircle,\n  Clock,\n  TrendingUp\n} from \"lucide-react\"\n\n//todo: remove mock data\nconst mockThreatData = [\n  {\n    id: \"SOL-001\",\n    type: \"Solar Flare\",\n    severity: \"Low\",\n    probability: 15,\n    timeToEvent: \"6.2 hours\",\n    impact: \"Minor communication disruption\",\n    recommendation: \"Continue nominal operations\"\n  },\n  {\n    id: \"DEB-002\", \n    type: \"Space Debris\",\n    severity: \"Medium\",\n    probability: 8,\n    timeToEvent: \"2.1 hours\",\n    impact: \"Collision risk with main engine\",\n    recommendation: \"Execute avoidance maneuver at T+1:45\"\n  },\n  {\n    id: \"RAD-003\",\n    type: \"Radiation Exposure\", \n    severity: \"Low\",\n    probability: 25,\n    timeToEvent: \"Ongoing\",\n    impact: \"Accumulated dose approaching limits\",\n    recommendation: \"Monitor crew exposure levels\"\n  }\n]\n\nexport default function ThreatMonitor() {\n  const [selectedThreat, setSelectedThreat] = useState<string | null>(null)\n  const [alertsEnabled, setAlertsEnabled] = useState(true)\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"Low\": return \"success-green\"\n      case \"Medium\": return \"warning-amber\"\n      case \"High\": return \"critical-red\"\n      case \"Critical\": return \"critical-red\"\n      default: return \"neutral-gray\"\n    }\n  }\n\n  const getThreatIcon = (type: string) => {\n    switch (type) {\n      case \"Solar Flare\": return Zap\n      case \"Space Debris\": return Satellite\n      case \"Radiation Exposure\": return Radiation\n      default: return AlertTriangle\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Threat Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card data-testid=\"card-overall-status\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Overall Status</p>\n                <p className=\"text-2xl font-bold text-success-green\">Nominal</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-success-green\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-active-threats\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Threats</p>\n                <p className=\"text-2xl font-bold text-warning-amber\">3</p>\n              </div>\n              <Shield className=\"w-8 h-8 text-warning-amber\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-threat-level\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Threat Level</p>\n                <p className=\"text-2xl font-bold text-warning-amber\">Medium</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-warning-amber\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Active Threats */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-mission-orange\" />\n              Active Threat Detection\n            </CardTitle>\n            <Button \n              variant={alertsEnabled ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => {\n                setAlertsEnabled(!alertsEnabled)\n                console.log(`Threat alerts ${alertsEnabled ? 'disabled' : 'enabled'}`)\n              }}\n              data-testid=\"button-toggle-alerts\"\n            >\n              {alertsEnabled ? \"Alerts On\" : \"Alerts Off\"}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {mockThreatData.map((threat) => {\n              const ThreatIcon = getThreatIcon(threat.type)\n              const isSelected = selectedThreat === threat.id\n              \n              return (\n                <div key={threat.id}>\n                  <Card \n                    className={`hover-elevate cursor-pointer transition-all ${\n                      isSelected ? 'ring-2 ring-mission-orange' : ''\n                    }`}\n                    onClick={() => {\n                      setSelectedThreat(isSelected ? null : threat.id)\n                      console.log(`${isSelected ? 'Deselected' : 'Selected'} threat: ${threat.type}`)\n                    }}\n                    data-testid={`threat-${threat.id}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <ThreatIcon className=\"w-5 h-5 text-mission-orange\" />\n                          <div>\n                            <div className=\"font-semibold\">{threat.type}</div>\n                            <div className=\"text-sm text-muted-foreground\">ID: {threat.id}</div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-sm text-muted-foreground\">Probability</div>\n                            <div className=\"font-mono font-bold\">{threat.probability}%</div>\n                          </div>\n                          \n                          <div className=\"text-center\">\n                            <div className=\"text-sm text-muted-foreground\">Time to Event</div>\n                            <div className=\"font-mono font-bold\">{threat.timeToEvent}</div>\n                          </div>\n                          \n                          <Badge className={`bg-${getSeverityColor(threat.severity)}/20 text-${getSeverityColor(threat.severity)}`}>\n                            {threat.severity}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {isSelected && (\n                        <div className=\"mt-4 pt-4 border-t space-y-3\">\n                          <div>\n                            <div className=\"text-sm font-medium text-muted-foreground mb-1\">Impact Assessment</div>\n                            <div className=\"text-sm\">{threat.impact}</div>\n                          </div>\n                          \n                          <div>\n                            <div className=\"text-sm font-medium text-muted-foreground mb-1\">AI Recommendation</div>\n                            <div className=\"text-sm font-semibold text-mission-orange\">{threat.recommendation}</div>\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" className=\"bg-mission-orange hover:bg-mission-orange/90\" data-testid={`button-mitigate-${threat.id}`}>\n                              Execute Mitigation\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-details-${threat.id}`}>\n                              View Details\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Historical Threats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"w-5 h-5 text-mission-orange\" />\n            Recent Threat History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-4 h-4 text-success-green\" />\n                <div>\n                  <div className=\"font-medium\">Solar Flare (X2.1)</div>\n                  <div className=\"text-sm text-muted-foreground\">2024-03-14 08:45 UTC</div>\n                </div>\n              </div>\n              <Badge className=\"bg-success-green/20 text-success-green\">Mitigated</Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-4 h-4 text-success-green\" />\n                <div>\n                  <div className=\"font-medium\">Debris Avoidance</div>\n                  <div className=\"text-sm text-muted-foreground\">2024-03-13 14:22 UTC</div>\n                </div>\n              </div>\n              <Badge className=\"bg-success-green/20 text-success-green\">Successful</Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-4 h-4 text-success-green\" />\n                <div>\n                  <div className=\"font-medium\">Communication Blackout</div>\n                  <div className=\"text-sm text-muted-foreground\">2024-03-12 20:15 UTC</div>\n                </div>\n              </div>\n              <Badge className=\"bg-success-green/20 text-success-green\">Resolved</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":10225},"OdinOptimal/client/src/components/TrajectoryViewer.tsx":{"content":"import { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { \n  RotateCcw, \n  Play, \n  Pause, \n  Square, \n  Maximize, \n  Settings,\n  Target,\n  Orbit\n} from \"lucide-react\"\nimport trajectoryImage from \"@assets/generated_images/Orbital_trajectory_visualization_bda0124a.png\"\n\nexport default function TrajectoryViewer() {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [timeScale, setTimeScale] = useState([1])\n  const [selectedPhase, setSelectedPhase] = useState(\"transfer\")\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying)\n    console.log(isPlaying ? 'Pausing trajectory simulation' : 'Starting trajectory simulation')\n  }\n\n  const handleStop = () => {\n    setIsPlaying(false)\n    console.log('Stopping trajectory simulation')\n  }\n\n  const handleReset = () => {\n    setIsPlaying(false)\n    console.log('Resetting trajectory to initial position')\n  }\n\n  const trajectoryPhases = [\n    { id: \"launch\", name: \"Launch\", status: \"completed\" },\n    { id: \"transfer\", name: \"Transfer Orbit\", status: \"active\" },\n    { id: \"approach\", name: \"Lunar Approach\", status: \"pending\" },\n    { id: \"insertion\", name: \"Orbit Insertion\", status: \"pending\" }\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 3D Visualization */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Orbit className=\"w-5 h-5 text-mission-orange\" />\n              3D Trajectory Visualization\n            </CardTitle>\n            <div className=\"flex gap-2\">\n              <Badge className=\"bg-success-green/20 text-success-green\">\n                Lambert Solution Calculated\n              </Badge>\n              <Button size=\"icon\" variant=\"outline\" data-testid=\"button-fullscreen\">\n                <Maximize className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Placeholder for 3D visualization - would be Three.js in real implementation */}\n          <div className=\"relative aspect-video bg-gradient-to-br from-space-blue/20 to-black/40 rounded-lg overflow-hidden\">\n            <img \n              src={trajectoryImage} \n              alt=\"Trajectory Visualization\" \n              className=\"w-full h-full object-cover opacity-80\"\n            />\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-white font-mono text-sm\">\n                  3D Trajectory Display\n                </div>\n                <div className=\"text-mission-orange font-mono text-xs\">\n                  Earth → L1 Lagrange → Moon Orbit\n                </div>\n              </div>\n            </div>\n            \n            {/* Overlay Controls */}\n            <div className=\"absolute bottom-4 left-4 right-4\">\n              <div className=\"flex items-center justify-between bg-black/60 backdrop-blur-sm rounded-lg p-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Button \n                    size=\"icon\" \n                    variant=\"outline\" \n                    onClick={handlePlayPause}\n                    data-testid=\"button-play-pause\"\n                    className=\"text-white border-white/30 hover:bg-white/10\"\n                  >\n                    {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                  </Button>\n                  <Button \n                    size=\"icon\" \n                    variant=\"outline\" \n                    onClick={handleStop}\n                    data-testid=\"button-stop\"\n                    className=\"text-white border-white/30 hover:bg-white/10\"\n                  >\n                    <Square className=\"w-4 h-4\" />\n                  </Button>\n                  <Button \n                    size=\"icon\" \n                    variant=\"outline\" \n                    onClick={handleReset}\n                    data-testid=\"button-reset\"\n                    className=\"text-white border-white/30 hover:bg-white/10\"\n                  >\n                    <RotateCcw className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center gap-4 text-white text-sm\">\n                  <span>Time Scale:</span>\n                  <div className=\"w-24\">\n                    <Slider\n                      value={timeScale}\n                      onValueChange={setTimeScale}\n                      max={10}\n                      min={0.1}\n                      step={0.1}\n                      className=\"w-full\"\n                    />\n                  </div>\n                  <span>{timeScale[0]}x</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mission Phases */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5 text-mission-orange\" />\n              Mission Phases\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {trajectoryPhases.map((phase) => (\n                <div \n                  key={phase.id}\n                  className={`flex items-center justify-between p-3 rounded-lg border cursor-pointer hover-elevate ${\n                    selectedPhase === phase.id ? 'bg-mission-orange/10 border-mission-orange' : 'border-border'\n                  }`}\n                  onClick={() => {\n                    setSelectedPhase(phase.id)\n                    console.log(`Selected trajectory phase: ${phase.name}`)\n                  }}\n                  data-testid={`phase-${phase.id}`}\n                >\n                  <span className=\"font-medium\">{phase.name}</span>\n                  <Badge \n                    className={\n                      phase.status === 'completed' ? 'bg-success-green/20 text-success-green' :\n                      phase.status === 'active' ? 'bg-mission-orange/20 text-mission-orange' :\n                      'bg-neutral-gray/20 text-neutral-gray'\n                    }\n                  >\n                    {phase.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Trajectory Parameters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 font-mono text-sm\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <div className=\"text-muted-foreground\">Total ΔV</div>\n                  <div className=\"font-semibold\">3.15 km/s</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground\">Flight Time</div>\n                  <div className=\"font-semibold\">72.4 hours</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground\">Fuel Mass</div>\n                  <div className=\"font-semibold\">1,247 kg</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground\">Efficiency</div>\n                  <div className=\"font-semibold text-success-green\">94.2%</div>\n                </div>\n              </div>\n              \n              <div className=\"pt-4 border-t\">\n                <div className=\"text-muted-foreground mb-2\">AI Recommendations</div>\n                <div className=\"text-sm space-y-1\">\n                  <div>• Optimal launch window: 2024-03-15 14:30 UTC</div>\n                  <div>• Solar activity favorable for 48-hour period</div>\n                  <div>• Debris avoidance maneuver at T+36:15</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":8268},"OdinOptimal/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"OdinOptimal/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"OdinOptimal/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"OdinOptimal/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"OdinOptimal/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"OdinOptimal/client/src/components/examples/AppSidebar.tsx":{"content":"import AppSidebar from '../AppSidebar'\nimport { SidebarProvider } from \"@/components/ui/sidebar\"\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  )\n}","size_bytes":414},"OdinOptimal/client/src/components/examples/DecisionLog.tsx":{"content":"import DecisionLog from '../DecisionLog'\n\nexport default function DecisionLogExample() {\n  return <DecisionLog />\n}","size_bytes":115},"OdinOptimal/client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection'\n\nexport default function HeroSectionExample() {\n  return <HeroSection />\n}","size_bytes":115},"OdinOptimal/client/src/components/examples/LanguageSwitcher.tsx":{"content":"import LanguageSwitcher from '../LanguageSwitcher'\n\nexport default function LanguageSwitcherExample() {\n  return (\n    <div className=\"p-4 bg-background\">\n      <LanguageSwitcher />\n    </div>\n  )\n}","size_bytes":198},"OdinOptimal/client/src/components/examples/MissionDashboard.tsx":{"content":"import MissionDashboard from '../MissionDashboard'\n\nexport default function MissionDashboardExample() {\n  return <MissionDashboard />\n}","size_bytes":135},"OdinOptimal/client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle'\nimport { ThemeProvider } from '../ThemeProvider'\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4 bg-background\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  )\n}","size_bytes":274},"OdinOptimal/client/src/components/examples/ThreatMonitor.tsx":{"content":"import ThreatMonitor from '../ThreatMonitor'\n\nexport default function ThreatMonitorExample() {\n  return <ThreatMonitor />\n}","size_bytes":123},"OdinOptimal/client/src/components/examples/TrajectoryViewer.tsx":{"content":"import TrajectoryViewer from '../TrajectoryViewer'\n\nexport default function TrajectoryViewerExample() {\n  return <TrajectoryViewer />\n}","size_bytes":135},"OdinOptimal/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"OdinOptimal/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"OdinOptimal/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"OdinOptimal/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"OdinOptimal/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"OdinOptimal/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"OdinOptimal/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"OdinOptimal/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"OdinOptimal/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"OdinOptimal/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"OdinOptimal/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"OdinOptimal/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"OdinOptimal/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"OdinOptimal/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"OdinOptimal/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"OdinOptimal/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"OdinOptimal/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"OdinOptimal/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"OdinOptimal/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"OdinOptimal/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"OdinOptimal/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"OdinOptimal/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"OdinOptimal/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"OdinOptimal/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"OdinOptimal/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"OdinOptimal/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"OdinOptimal/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"OdinOptimal/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"OdinOptimal/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"OdinOptimal/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"OdinOptimal/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"OdinOptimal/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"OdinOptimal/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"OdinOptimal/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"OdinOptimal/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"OdinOptimal/client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"OdinOptimal/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"OdinOptimal/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"OdinOptimal/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"OdinOptimal/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"OdinOptimal/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"OdinOptimal/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"OdinOptimal/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"OdinOptimal/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"OdinOptimal/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"OdinOptimal/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"OdinOptimal/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}